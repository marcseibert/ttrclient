// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ttr-protocol.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace TTR.Protocol {

  /// <summary>Holder for reflection information generated from ttr-protocol.proto</summary>
  public static partial class TtrProtocolReflection {

    #region Descriptor
    /// <summary>File descriptor for ttr-protocol.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TtrProtocolReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJ0dHItcHJvdG9jb2wucHJvdG8SDFRUUi5Qcm90b2NvbCK/AQoHTWVzc2Fn",
            "ZRInCgR0eXBlGAEgASgOMhkuVFRSLlByb3RvY29sLk1lc3NhZ2VUeXBlEisK",
            "CXRleHRfcmVzcBgCIAEoCzIWLlRUUi5Qcm90b2NvbC5UZXh0UmVzcEgAEisK",
            "CXR1cm5fcmVzcBgDIAEoCzIWLlRUUi5Qcm90b2NvbC5UdXJuUmVzcEgAEikK",
            "CHR1cm5fcmVxGAQgASgLMhUuVFRSLlByb3RvY29sLlR1cm5SZXFIAEIGCgR0",
            "dXJuIkEKCFRleHRSZXNwEicKBHR5cGUYASABKA4yGS5UVFIuUHJvdG9jb2wu",
            "TWVzc2FnZVR5cGUSDAoEdGV4dBgCIAEoCSK0BQoIVHVyblJlc3ASKQoJdHVy",
            "bl90eXBlGAEgASgOMhYuVFRSLlByb3RvY29sLlR1cm5UeXBlEikKBnBsYXll",
            "chgCIAEoDjIZLlRUUi5Qcm90b2NvbC5QbGF5ZXJDb2xvchIPCgdzdWNjZXNz",
            "GAMgASgIEisKCmVycm9yX2NvZGUYBCABKA4yFy5UVFIuUHJvdG9jb2wuRXJy",
            "b3JDb2RlEj4KE2xpc3RfYWxsX3JvdXRlX3Jlc3AYBSABKAsyHy5UVFIuUHJv",
            "dG9jb2wuTGlzdEFsbFJvdXRlc1Jlc3BIABIrCglqb2luX3Jlc3AYBiABKAsy",
            "Fi5UVFIuUHJvdG9jb2wuSm9pblJlc3BIABI4ChBib2FyZF9zdGF0ZV9yZXNw",
            "GAcgASgLMhwuVFRSLlByb3RvY29sLkJvYXJkU3RhdGVSZXNwSAASRwoYZHJh",
            "d19wYXNzc2VuZ2VyX2Nhcl9yZXNwGAggASgLMiMuVFRSLlByb3RvY29sLkRy",
            "YXdQYXNzZW5nZXJDYXJzUmVzcEgAEjgKEGNsYWltX3JvdXRlX3Jlc3AYCSAB",
            "KAsyHC5UVFIuUHJvdG9jb2wuQ2xhaW1Sb3V0ZVJlc3BIABJRCh1kcmF3X2Rl",
            "c3RpbmF0aW9uX3RpY2tldHNfcmVzcBgKIAEoCzIoLlRUUi5Qcm90b2NvbC5E",
            "cmF3RGVzdGluYXRpb25UaWNrZXRzUmVzcEgAElMKHmNsYWltX2Rlc3RpbmF0",
            "aW9uX3RpY2tldHNfcmVzcBgLIAEoCzIpLlRUUi5Qcm90b2NvbC5DbGFpbURl",
            "c3RpbmF0aW9uVGlja2V0c1Jlc3BIABI6ChFwbGF5ZXJfc2NvcmVfcmVzcBgM",
            "IAEoCzIdLlRUUi5Qcm90b2NvbC5QbGF5ZXJTY29yZVJlc3BIAEIGCgRyZXNw",
            "IqoECgdUdXJuUmVxEikKCXR1cm5fdHlwZRgBIAEoDjIWLlRUUi5Qcm90b2Nv",
            "bC5UdXJuVHlwZRIpCgZwbGF5ZXIYAiABKA4yGS5UVFIuUHJvdG9jb2wuUGxh",
            "eWVyQ29sb3ISPAoSbGlzdF9hbGxfcm91dGVfcmVxGAMgASgLMh4uVFRSLlBy",
            "b3RvY29sLkxpc3RBbGxSb3V0ZXNSZXFIABIpCghqb2luX3JlcRgEIAEoCzIV",
            "LlRUUi5Qcm90b2NvbC5Kb2luUmVxSAASNgoPYm9hcmRfc3RhdGVfcmVxGAUg",
            "ASgLMhsuVFRSLlByb3RvY29sLkJvYXJkU3RhdGVSZXFIABJFChdkcmF3X3Bh",
            "c3NzZW5nZXJfY2FyX3JlcRgGIAEoCzIiLlRUUi5Qcm90b2NvbC5EcmF3UGFz",
            "c2VuZ2VyQ2Fyc1JlcUgAEjYKD2NsYWltX3JvdXRlX3JlcRgHIAEoCzIbLlRU",
            "Ui5Qcm90b2NvbC5DbGFpbVJvdXRlUmVxSAASTwocZHJhd19kZXN0aW5hdGlv",
            "bl90aWNrZXRzX3JlcRgIIAEoCzInLlRUUi5Qcm90b2NvbC5EcmF3RGVzdGlu",
            "YXRpb25UaWNrZXRzUmVxSAASUQodY2xhaW1fZGVzdGluYXRpb25fdGlja2V0",
            "c19yZXEYCSABKAsyKC5UVFIuUHJvdG9jb2wuQ2xhaW1EZXN0aW5hdGlvblRp",
            "Y2tldHNSZXFIAEIFCgNyZXEidwoRRGVzdGluYXRpb25UaWNrZXQSKAoFY2l0",
            "eTEYASABKA4yGS5UVFIuUHJvdG9jb2wuRGVzdGluYXRpb24SKAoFY2l0eTIY",
            "AiABKA4yGS5UVFIuUHJvdG9jb2wuRGVzdGluYXRpb24SDgoGcG9pbnRzGAMg",
            "ASgFIsIBCgVSb3V0ZRIlCgJkMRgBIAEoDjIZLlRUUi5Qcm90b2NvbC5EZXN0",
            "aW5hdGlvbhIlCgJkMhgCIAEoDjIZLlRUUi5Qcm90b2NvbC5EZXN0aW5hdGlv",
            "bhIMCgRjb3N0GAMgASgFEi4KBWNvbG9yGAQgASgOMh8uVFRSLlByb3RvY29s",
            "LlBhc3NlbmdlckNhckNvbG9yEi0KCmNsYWltZWRfYnkYBSABKA4yGS5UVFIu",
            "UHJvdG9jb2wuUGxheWVyQ29sb3IiOAoRTGlzdEFsbFJvdXRlc1Jlc3ASIwoG",
            "cm91dGVzGAEgAygLMhMuVFRSLlByb3RvY29sLlJvdXRlIjkKCEpvaW5SZXNw",
            "Ei0KC2NsaWVudF90eXBlGAEgASgOMhguVFRSLlByb3RvY29sLkNsaWVudFR5",
            "cGUiwQMKDkJvYXJkU3RhdGVSZXNwEkQKG2ZhY2VfdXBfcGFzc2VuZ2VyX2Nh",
            "cmRfZGVjaxgBIAMoDjIfLlRUUi5Qcm90b2NvbC5QYXNzZW5nZXJDYXJDb2xv",
            "chIoCiB0b3Bkb3duX3Bhc3Nlbmdlcl9jYXJfZGVja19jb3VudBgCIAEoBRIh",
            "ChlkZXN0aW5hdGlvbl90aWNrZXRzX2NvdW50GAMgASgFEhwKFGRyYXduX3Bh",
            "c3Nlbmdlcl9jYXJzGAQgAygFEhsKE2xlZnRfcGFzc2VuZ2VyX2NhcnMYBSAB",
            "KAUSQQoYZHJhd25fZGV0aW5hdGlvbl90aWNrZXRzGAYgAygLMh8uVFRSLlBy",
            "b3RvY29sLkRlc3RpbmF0aW9uVGlja2V0EkoKIXRvX2JlX2NsYWltZWRfZGVz",
            "dGluYXRpb25fdGlja2V0cxgHIAMoCzIfLlRUUi5Qcm90b2NvbC5EZXN0aW5h",
            "dGlvblRpY2tldBInCgpvd25fcm91dGVzGAggAygLMhMuVFRSLlByb3RvY29s",
            "LlJvdXRlEhYKDmFjdGl2ZV9wbGF5ZXJzGAkgASgFEhEKCWZpbmFsVHVybhgK",
            "IAEoCCKmAQoVRHJhd1Bhc3NlbmdlckNhcnNSZXNwEjQKC2RyYXduX2NvbG9y",
            "GAEgASgOMh8uVFRSLlByb3RvY29sLlBhc3NlbmdlckNhckNvbG9yEkMKGmZh",
            "Y2VfdXBfcGFzc2VuZ2VyX2Nhcl9kZWNrGAIgAygOMh8uVFRSLlByb3RvY29s",
            "LlBhc3NlbmdlckNhckNvbG9yEhIKCmhpZGRlbkRlY2sYAyABKAgi0gEKDkNs",
            "YWltUm91dGVSZXNwEiUKAmQxGAEgASgOMhkuVFRSLlByb3RvY29sLkRlc3Rp",
            "bmF0aW9uEiUKAmQyGAIgASgOMhkuVFRSLlByb3RvY29sLkRlc3RpbmF0aW9u",
            "EjQKC3JvdXRlX2NvbG9yGAMgASgOMh8uVFRSLlByb3RvY29sLlBhc3Nlbmdl",
            "ckNhckNvbG9yEjwKE3Bhc3Nlbmdlcl9jYXJfY29sb3IYBCADKA4yHy5UVFIu",
            "UHJvdG9jb2wuUGFzc2VuZ2VyQ2FyQ29sb3IiUgoaRHJhd0Rlc3RpbmF0aW9u",
            "VGlja2V0c1Jlc3ASNAoLZHJhd25fY2FyZHMYASADKAsyHy5UVFIuUHJvdG9j",
            "b2wuRGVzdGluYXRpb25UaWNrZXQibgobQ2xhaW1EZXN0aW5hdGlvblRpY2tl",
            "dHNSZXNwEjQKC2RyYXduX2NhcmRzGAEgAygLMh8uVFRSLlByb3RvY29sLkRl",
            "c3RpbmF0aW9uVGlja2V0EhkKEWRyYXduX2NhcmRzX2NvdW50GAIgASgFIowC",
            "Cg9QbGF5ZXJTY29yZVJlc3ASDAoEbmFtZRgBIAEoCRITCgt0b3RhbF9zY29y",
            "ZRgCIAEoBRIcChRzY29yZV9wYXNzZW5nZXJfY2FycxgDIAEoBRIZChFsb25n",
            "X3JvdXRlX2xlbmd0aBgEIAEoBRIOCgZ3aW5uZXIYBSABKAgSFQoNbG9uZ2Vz",
            "dF9yb3V0ZRgGIAEoCBI4Cg9jbGFpbWVkX3RpY2tldHMYByADKAsyHy5UVFIu",
            "UHJvdG9jb2wuRGVzdGluYXRpb25UaWNrZXQSPAoTbm90X2NsYWltZWRfdGlj",
            "a2V0cxgIIAMoCzIfLlRUUi5Qcm90b2NvbC5EZXN0aW5hdGlvblRpY2tldCIP",
            "Cg1Cb2FyZFN0YXRlUmVxIhIKEExpc3RBbGxSb3V0ZXNSZXEiGwoZRHJhd0Rl",
            "c3RpbmF0aW9uVGlja2V0c1JlcSJNCgdKb2luUmVxEhMKC3BsYXllcl9uYW1l",
            "GAEgASgJEi0KC2NsaWVudF90eXBlGAIgASgOMhguVFRSLlByb3RvY29sLkNs",
            "aWVudFR5cGUiaQoURHJhd1Bhc3NlbmdlckNhcnNSZXESEwoLaGlkZGVuX2Rl",
            "Y2sYASABKAgSPAoTcGFzc2VuZ2VyX2Nhcl9jb2xvchgCIAEoDjIfLlRUUi5Q",
            "cm90b2NvbC5QYXNzZW5nZXJDYXJDb2xvciIqChpDbGFpbURlc3RpbmF0aW9u",
            "VGlja2V0c1JlcRIMCgRrZWVwGAEgAygIIo0BCg1DbGFpbVJvdXRlUmVxEiUK",
            "AmQxGAEgASgOMhkuVFRSLlByb3RvY29sLkRlc3RpbmF0aW9uEiUKAmQyGAIg",
            "ASgOMhkuVFRSLlByb3RvY29sLkRlc3RpbmF0aW9uEi4KBWNvbG9yGAMgASgO",
            "Mh8uVFRSLlByb3RvY29sLlBhc3NlbmdlckNhckNvbG9yKjYKC01lc3NhZ2VU",
            "eXBlEgsKB1JFUVVFU1QQABIICgRJTkZPEAESEAoMVEVYVF9NRVNTQUdFEAIq",
            "JgoKQ2xpZW50VHlwZRIKCgZQTEFZRVIQABIMCghPQlNFUlZFUhABKsgBCghU",
            "dXJuVHlwZRIICgRKT0lOEAASFwoTRFJBV19QQVNTRU5HRVJfQ0FSUxABEhwK",
            "GERSQVdfREVTVElOQVRJT05fVElDS0VUUxACEh0KGUNMQUlNX0RFU1RJTkFU",
            "SU9OX1RJQ0tFVFMQAxIPCgtDTEFJTV9ST1VURRAEEg8KC0JPQVJEX1NUQVRF",
            "EAUSEwoPTElTVF9BTExfUk9VVEVTEAYSCAoEVFVSThAHEg8KC0ZJTkFMX1ND",
            "T1JFEAgSCgoGVU5LT1dOEAkqWwoLUGxheWVyU3RhdGUSEAoMREVGQVVMVF9U",
            "VVJOEAASHAoYRklSU1RfUEFTU0VOR0VSX0NBUl9EUkFXEAESHAoYQ0xBSU1f",
            "REVTVElOQVRJT05fVElDS0VUEAIqlgEKCUVycm9yQ29kZRIYChRET1VCTEVf",
            "Uk9VVEVfQ0xBSU1FRBAAEhAKDE5PX0NBUkRfTEVGVBABEhIKDlJVTEVfVklP",
            "TEFUSU9OEAISFAoQTk9UX1BMQVlFUlNfVFVSThADEhIKDklOVEVSTkFMX0VS",
            "Uk9SEAQSFQoRV1JPTkdfVFVSTl9GT1JNQVQQBRIICgROT05FEAYqeAoRUGFz",
            "c2VuZ2VyQ2FyQ29sb3ISCgoGUFVSUExFEAASCQoFV0hJVEUQARIICgRCTFVF",
            "EAISCgoGWUVMTE9XEAMSCgoGT1JBTkdFEAQSCQoFQkxBQ0sQBRIHCgNSRUQQ",
            "BhIJCgVHUkVFThAHEgsKB1JBSU5CT1cQCCp2CgtQbGF5ZXJDb2xvchIPCgtQ",
            "TEFZRVJfTk9ORRAAEg8KC1BMQVlFUl9CTFVFEAESDgoKUExBWUVSX1JFRBAC",
            "EhAKDFBMQVlFUl9HUkVFThADEhEKDVBMQVlFUl9ZRUxMT1cQBBIQCgxQTEFZ",
            "RVJfQkxBQ0sQBSqLBAoLRGVzdGluYXRpb24SCwoHQ0hJQ0FHTxAAEg4KCkxP",
            "U0FOR0VMRVMQARIMCghNT05UUkVBTBACEgsKB0FUTEFOVEEQAxILCgdDQUxH",
            "QVJZEAQSCgoGREVOVkVSEAUSCgoGRUxQQVNPEAYSCwoHSE9VU1RPThAHEgwK",
            "CExBU1ZFR0FTEAgSDgoKTkVXT1JMRUFOUxAJEhAKDE9LTEFIT01BQ0lUWRAK",
            "EgsKB1BIT0VOSVgQCxIMCghQT1JUTEFORBAMEg4KClNBSU5UTE9VSVMQDRIQ",
            "CgxTQVVMVFNUTUFSSUUQDhIOCgpXQVNISU5HVE9OEA8SEAoMU0FORlJBTkNJ",
            "U0NPEBASCwoHVE9ST05UTxAREgoKBkJPU1RPThASEg4KCkNIQVJMRVNUT04Q",
            "ExIKCgZEQUxMQVMQFBIKCgZEVUxVVEgQFRIKCgZIRUxFTkEQFhIOCgpLQU5T",
            "QVNDSVRZEBcSDgoKTElUVExFUk9DSxAYEgkKBU1JQU1JEBkSDQoJTkFTSFZJ",
            "TExFEBoSCwoHTkVXWU9SSxAbEgkKBU9NQUhBEBwSDgoKUElUVFNCVVJHSBAd",
            "EgsKB1JBTEVJR0gQHhIQCgxTQUxUTEFLRUNJVFkQHxILCgdTQU5UQUZFECAS",
            "CwoHU0VBVFRMRRAhEg0KCVZBTkNPVVZFUhAiEgwKCFdJTk5JUEVHECNiBnBy",
            "b3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::TTR.Protocol.MessageType), typeof(global::TTR.Protocol.ClientType), typeof(global::TTR.Protocol.TurnType), typeof(global::TTR.Protocol.PlayerState), typeof(global::TTR.Protocol.ErrorCode), typeof(global::TTR.Protocol.PassengerCarColor), typeof(global::TTR.Protocol.PlayerColor), typeof(global::TTR.Protocol.Destination), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::TTR.Protocol.Message), global::TTR.Protocol.Message.Parser, new[]{ "Type", "TextResp", "TurnResp", "TurnReq" }, new[]{ "Turn" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TTR.Protocol.TextResp), global::TTR.Protocol.TextResp.Parser, new[]{ "Type", "Text" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TTR.Protocol.TurnResp), global::TTR.Protocol.TurnResp.Parser, new[]{ "TurnType", "Player", "Success", "ErrorCode", "ListAllRouteResp", "JoinResp", "BoardStateResp", "DrawPasssengerCarResp", "ClaimRouteResp", "DrawDestinationTicketsResp", "ClaimDestinationTicketsResp", "PlayerScoreResp" }, new[]{ "Resp" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TTR.Protocol.TurnReq), global::TTR.Protocol.TurnReq.Parser, new[]{ "TurnType", "Player", "ListAllRouteReq", "JoinReq", "BoardStateReq", "DrawPasssengerCarReq", "ClaimRouteReq", "DrawDestinationTicketsReq", "ClaimDestinationTicketsReq" }, new[]{ "Req" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TTR.Protocol.DestinationTicket), global::TTR.Protocol.DestinationTicket.Parser, new[]{ "City1", "City2", "Points" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TTR.Protocol.Route), global::TTR.Protocol.Route.Parser, new[]{ "D1", "D2", "Cost", "Color", "ClaimedBy" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TTR.Protocol.ListAllRoutesResp), global::TTR.Protocol.ListAllRoutesResp.Parser, new[]{ "Routes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TTR.Protocol.JoinResp), global::TTR.Protocol.JoinResp.Parser, new[]{ "ClientType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TTR.Protocol.BoardStateResp), global::TTR.Protocol.BoardStateResp.Parser, new[]{ "FaceUpPassengerCardDeck", "TopdownPassengerCarDeckCount", "DestinationTicketsCount", "DrawnPassengerCars", "LeftPassengerCars", "DrawnDetinationTickets", "ToBeClaimedDestinationTickets", "OwnRoutes", "ActivePlayers", "FinalTurn" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TTR.Protocol.DrawPassengerCarsResp), global::TTR.Protocol.DrawPassengerCarsResp.Parser, new[]{ "DrawnColor", "FaceUpPassengerCarDeck", "HiddenDeck" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TTR.Protocol.ClaimRouteResp), global::TTR.Protocol.ClaimRouteResp.Parser, new[]{ "D1", "D2", "RouteColor", "PassengerCarColor" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TTR.Protocol.DrawDestinationTicketsResp), global::TTR.Protocol.DrawDestinationTicketsResp.Parser, new[]{ "DrawnCards" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TTR.Protocol.ClaimDestinationTicketsResp), global::TTR.Protocol.ClaimDestinationTicketsResp.Parser, new[]{ "DrawnCards", "DrawnCardsCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TTR.Protocol.PlayerScoreResp), global::TTR.Protocol.PlayerScoreResp.Parser, new[]{ "Name", "TotalScore", "ScorePassengerCars", "LongRouteLength", "Winner", "LongestRoute", "ClaimedTickets", "NotClaimedTickets" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TTR.Protocol.BoardStateReq), global::TTR.Protocol.BoardStateReq.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TTR.Protocol.ListAllRoutesReq), global::TTR.Protocol.ListAllRoutesReq.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TTR.Protocol.DrawDestinationTicketsReq), global::TTR.Protocol.DrawDestinationTicketsReq.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TTR.Protocol.JoinReq), global::TTR.Protocol.JoinReq.Parser, new[]{ "PlayerName", "ClientType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TTR.Protocol.DrawPassengerCarsReq), global::TTR.Protocol.DrawPassengerCarsReq.Parser, new[]{ "HiddenDeck", "PassengerCarColor" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TTR.Protocol.ClaimDestinationTicketsReq), global::TTR.Protocol.ClaimDestinationTicketsReq.Parser, new[]{ "Keep" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TTR.Protocol.ClaimRouteReq), global::TTR.Protocol.ClaimRouteReq.Parser, new[]{ "D1", "D2", "Color" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// ---------- Enums ----------
  /// </summary>
  public enum MessageType {
    [pbr::OriginalName("REQUEST")] Request = 0,
    [pbr::OriginalName("INFO")] Info = 1,
    [pbr::OriginalName("TEXT_MESSAGE")] TextMessage = 2,
  }

  public enum ClientType {
    [pbr::OriginalName("PLAYER")] Player = 0,
    [pbr::OriginalName("OBSERVER")] Observer = 1,
  }

  public enum TurnType {
    [pbr::OriginalName("JOIN")] Join = 0,
    [pbr::OriginalName("DRAW_PASSENGER_CARS")] DrawPassengerCars = 1,
    [pbr::OriginalName("DRAW_DESTINATION_TICKETS")] DrawDestinationTickets = 2,
    [pbr::OriginalName("CLAIM_DESTINATION_TICKETS")] ClaimDestinationTickets = 3,
    [pbr::OriginalName("CLAIM_ROUTE")] ClaimRoute = 4,
    [pbr::OriginalName("BOARD_STATE")] BoardState = 5,
    [pbr::OriginalName("LIST_ALL_ROUTES")] ListAllRoutes = 6,
    [pbr::OriginalName("TURN")] Turn = 7,
    [pbr::OriginalName("FINAL_SCORE")] FinalScore = 8,
    [pbr::OriginalName("UNKOWN")] Unkown = 9,
  }

  public enum PlayerState {
    [pbr::OriginalName("DEFAULT_TURN")] DefaultTurn = 0,
    [pbr::OriginalName("FIRST_PASSENGER_CAR_DRAW")] FirstPassengerCarDraw = 1,
    [pbr::OriginalName("CLAIM_DESTINATION_TICKET")] ClaimDestinationTicket = 2,
  }

  public enum ErrorCode {
    [pbr::OriginalName("DOUBLE_ROUTE_CLAIMED")] DoubleRouteClaimed = 0,
    [pbr::OriginalName("NO_CARD_LEFT")] NoCardLeft = 1,
    [pbr::OriginalName("RULE_VIOLATION")] RuleViolation = 2,
    [pbr::OriginalName("NOT_PLAYERS_TURN")] NotPlayersTurn = 3,
    [pbr::OriginalName("INTERNAL_ERROR")] InternalError = 4,
    [pbr::OriginalName("WRONG_TURN_FORMAT")] WrongTurnFormat = 5,
    [pbr::OriginalName("NONE")] None = 6,
  }

  public enum PassengerCarColor {
    [pbr::OriginalName("PURPLE")] Purple = 0,
    [pbr::OriginalName("WHITE")] White = 1,
    [pbr::OriginalName("BLUE")] Blue = 2,
    [pbr::OriginalName("YELLOW")] Yellow = 3,
    [pbr::OriginalName("ORANGE")] Orange = 4,
    [pbr::OriginalName("BLACK")] Black = 5,
    [pbr::OriginalName("RED")] Red = 6,
    [pbr::OriginalName("GREEN")] Green = 7,
    [pbr::OriginalName("RAINBOW")] Rainbow = 8,
  }

  public enum PlayerColor {
    [pbr::OriginalName("PLAYER_NONE")] PlayerNone = 0,
    [pbr::OriginalName("PLAYER_BLUE")] PlayerBlue = 1,
    [pbr::OriginalName("PLAYER_RED")] PlayerRed = 2,
    [pbr::OriginalName("PLAYER_GREEN")] PlayerGreen = 3,
    [pbr::OriginalName("PLAYER_YELLOW")] PlayerYellow = 4,
    [pbr::OriginalName("PLAYER_BLACK")] PlayerBlack = 5,
  }

  public enum Destination {
    [pbr::OriginalName("CHICAGO")] Chicago = 0,
    [pbr::OriginalName("LOSANGELES")] Losangeles = 1,
    [pbr::OriginalName("MONTREAL")] Montreal = 2,
    [pbr::OriginalName("ATLANTA")] Atlanta = 3,
    [pbr::OriginalName("CALGARY")] Calgary = 4,
    [pbr::OriginalName("DENVER")] Denver = 5,
    [pbr::OriginalName("ELPASO")] Elpaso = 6,
    [pbr::OriginalName("HOUSTON")] Houston = 7,
    [pbr::OriginalName("LASVEGAS")] Lasvegas = 8,
    [pbr::OriginalName("NEWORLEANS")] Neworleans = 9,
    [pbr::OriginalName("OKLAHOMACITY")] Oklahomacity = 10,
    [pbr::OriginalName("PHOENIX")] Phoenix = 11,
    [pbr::OriginalName("PORTLAND")] Portland = 12,
    [pbr::OriginalName("SAINTLOUIS")] Saintlouis = 13,
    [pbr::OriginalName("SAULTSTMARIE")] Saultstmarie = 14,
    [pbr::OriginalName("WASHINGTON")] Washington = 15,
    [pbr::OriginalName("SANFRANCISCO")] Sanfrancisco = 16,
    [pbr::OriginalName("TORONTO")] Toronto = 17,
    [pbr::OriginalName("BOSTON")] Boston = 18,
    [pbr::OriginalName("CHARLESTON")] Charleston = 19,
    [pbr::OriginalName("DALLAS")] Dallas = 20,
    [pbr::OriginalName("DULUTH")] Duluth = 21,
    [pbr::OriginalName("HELENA")] Helena = 22,
    [pbr::OriginalName("KANSASCITY")] Kansascity = 23,
    [pbr::OriginalName("LITTLEROCK")] Littlerock = 24,
    [pbr::OriginalName("MIAMI")] Miami = 25,
    [pbr::OriginalName("NASHVILLE")] Nashville = 26,
    [pbr::OriginalName("NEWYORK")] Newyork = 27,
    [pbr::OriginalName("OMAHA")] Omaha = 28,
    [pbr::OriginalName("PITTSBURGH")] Pittsburgh = 29,
    [pbr::OriginalName("RALEIGH")] Raleigh = 30,
    [pbr::OriginalName("SALTLAKECITY")] Saltlakecity = 31,
    [pbr::OriginalName("SANTAFE")] Santafe = 32,
    [pbr::OriginalName("SEATTLE")] Seattle = 33,
    [pbr::OriginalName("VANCOUVER")] Vancouver = 34,
    [pbr::OriginalName("WINNIPEG")] Winnipeg = 35,
  }

  #endregion

  #region Messages
  /// <summary>
  /// ---------- Base Messages ----------
  /// </summary>
  public sealed partial class Message : pb::IMessage<Message> {
    private static readonly pb::MessageParser<Message> _parser = new pb::MessageParser<Message>(() => new Message());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Message> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TTR.Protocol.TtrProtocolReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message(Message other) : this() {
      type_ = other.type_;
      switch (other.TurnCase) {
        case TurnOneofCase.TextResp:
          TextResp = other.TextResp.Clone();
          break;
        case TurnOneofCase.TurnResp:
          TurnResp = other.TurnResp.Clone();
          break;
        case TurnOneofCase.TurnReq:
          TurnReq = other.TurnReq.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message Clone() {
      return new Message(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::TTR.Protocol.MessageType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTR.Protocol.MessageType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "text_resp" field.</summary>
    public const int TextRespFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTR.Protocol.TextResp TextResp {
      get { return turnCase_ == TurnOneofCase.TextResp ? (global::TTR.Protocol.TextResp) turn_ : null; }
      set {
        turn_ = value;
        turnCase_ = value == null ? TurnOneofCase.None : TurnOneofCase.TextResp;
      }
    }

    /// <summary>Field number for the "turn_resp" field.</summary>
    public const int TurnRespFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTR.Protocol.TurnResp TurnResp {
      get { return turnCase_ == TurnOneofCase.TurnResp ? (global::TTR.Protocol.TurnResp) turn_ : null; }
      set {
        turn_ = value;
        turnCase_ = value == null ? TurnOneofCase.None : TurnOneofCase.TurnResp;
      }
    }

    /// <summary>Field number for the "turn_req" field.</summary>
    public const int TurnReqFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTR.Protocol.TurnReq TurnReq {
      get { return turnCase_ == TurnOneofCase.TurnReq ? (global::TTR.Protocol.TurnReq) turn_ : null; }
      set {
        turn_ = value;
        turnCase_ = value == null ? TurnOneofCase.None : TurnOneofCase.TurnReq;
      }
    }

    private object turn_;
    /// <summary>Enum of possible cases for the "turn" oneof.</summary>
    public enum TurnOneofCase {
      None = 0,
      TextResp = 2,
      TurnResp = 3,
      TurnReq = 4,
    }
    private TurnOneofCase turnCase_ = TurnOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TurnOneofCase TurnCase {
      get { return turnCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTurn() {
      turnCase_ = TurnOneofCase.None;
      turn_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Message);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Message other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (!object.Equals(TextResp, other.TextResp)) return false;
      if (!object.Equals(TurnResp, other.TurnResp)) return false;
      if (!object.Equals(TurnReq, other.TurnReq)) return false;
      if (TurnCase != other.TurnCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (turnCase_ == TurnOneofCase.TextResp) hash ^= TextResp.GetHashCode();
      if (turnCase_ == TurnOneofCase.TurnResp) hash ^= TurnResp.GetHashCode();
      if (turnCase_ == TurnOneofCase.TurnReq) hash ^= TurnReq.GetHashCode();
      hash ^= (int) turnCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (turnCase_ == TurnOneofCase.TextResp) {
        output.WriteRawTag(18);
        output.WriteMessage(TextResp);
      }
      if (turnCase_ == TurnOneofCase.TurnResp) {
        output.WriteRawTag(26);
        output.WriteMessage(TurnResp);
      }
      if (turnCase_ == TurnOneofCase.TurnReq) {
        output.WriteRawTag(34);
        output.WriteMessage(TurnReq);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (turnCase_ == TurnOneofCase.TextResp) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TextResp);
      }
      if (turnCase_ == TurnOneofCase.TurnResp) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TurnResp);
      }
      if (turnCase_ == TurnOneofCase.TurnReq) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TurnReq);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Message other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      switch (other.TurnCase) {
        case TurnOneofCase.TextResp:
          if (TextResp == null) {
            TextResp = new global::TTR.Protocol.TextResp();
          }
          TextResp.MergeFrom(other.TextResp);
          break;
        case TurnOneofCase.TurnResp:
          if (TurnResp == null) {
            TurnResp = new global::TTR.Protocol.TurnResp();
          }
          TurnResp.MergeFrom(other.TurnResp);
          break;
        case TurnOneofCase.TurnReq:
          if (TurnReq == null) {
            TurnReq = new global::TTR.Protocol.TurnReq();
          }
          TurnReq.MergeFrom(other.TurnReq);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::TTR.Protocol.MessageType) input.ReadEnum();
            break;
          }
          case 18: {
            global::TTR.Protocol.TextResp subBuilder = new global::TTR.Protocol.TextResp();
            if (turnCase_ == TurnOneofCase.TextResp) {
              subBuilder.MergeFrom(TextResp);
            }
            input.ReadMessage(subBuilder);
            TextResp = subBuilder;
            break;
          }
          case 26: {
            global::TTR.Protocol.TurnResp subBuilder = new global::TTR.Protocol.TurnResp();
            if (turnCase_ == TurnOneofCase.TurnResp) {
              subBuilder.MergeFrom(TurnResp);
            }
            input.ReadMessage(subBuilder);
            TurnResp = subBuilder;
            break;
          }
          case 34: {
            global::TTR.Protocol.TurnReq subBuilder = new global::TTR.Protocol.TurnReq();
            if (turnCase_ == TurnOneofCase.TurnReq) {
              subBuilder.MergeFrom(TurnReq);
            }
            input.ReadMessage(subBuilder);
            TurnReq = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class TextResp : pb::IMessage<TextResp> {
    private static readonly pb::MessageParser<TextResp> _parser = new pb::MessageParser<TextResp>(() => new TextResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TextResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TTR.Protocol.TtrProtocolReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextResp(TextResp other) : this() {
      type_ = other.type_;
      text_ = other.text_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextResp Clone() {
      return new TextResp(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::TTR.Protocol.MessageType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTR.Protocol.MessageType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 2;
    private string text_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TextResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TextResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Text != other.Text) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Text.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Text);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TextResp other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::TTR.Protocol.MessageType) input.ReadEnum();
            break;
          }
          case 18: {
            Text = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TurnResp : pb::IMessage<TurnResp> {
    private static readonly pb::MessageParser<TurnResp> _parser = new pb::MessageParser<TurnResp>(() => new TurnResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TurnResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TTR.Protocol.TtrProtocolReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TurnResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TurnResp(TurnResp other) : this() {
      turnType_ = other.turnType_;
      player_ = other.player_;
      success_ = other.success_;
      errorCode_ = other.errorCode_;
      switch (other.RespCase) {
        case RespOneofCase.ListAllRouteResp:
          ListAllRouteResp = other.ListAllRouteResp.Clone();
          break;
        case RespOneofCase.JoinResp:
          JoinResp = other.JoinResp.Clone();
          break;
        case RespOneofCase.BoardStateResp:
          BoardStateResp = other.BoardStateResp.Clone();
          break;
        case RespOneofCase.DrawPasssengerCarResp:
          DrawPasssengerCarResp = other.DrawPasssengerCarResp.Clone();
          break;
        case RespOneofCase.ClaimRouteResp:
          ClaimRouteResp = other.ClaimRouteResp.Clone();
          break;
        case RespOneofCase.DrawDestinationTicketsResp:
          DrawDestinationTicketsResp = other.DrawDestinationTicketsResp.Clone();
          break;
        case RespOneofCase.ClaimDestinationTicketsResp:
          ClaimDestinationTicketsResp = other.ClaimDestinationTicketsResp.Clone();
          break;
        case RespOneofCase.PlayerScoreResp:
          PlayerScoreResp = other.PlayerScoreResp.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TurnResp Clone() {
      return new TurnResp(this);
    }

    /// <summary>Field number for the "turn_type" field.</summary>
    public const int TurnTypeFieldNumber = 1;
    private global::TTR.Protocol.TurnType turnType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTR.Protocol.TurnType TurnType {
      get { return turnType_; }
      set {
        turnType_ = value;
      }
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 2;
    private global::TTR.Protocol.PlayerColor player_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTR.Protocol.PlayerColor Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 3;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "error_code" field.</summary>
    public const int ErrorCodeFieldNumber = 4;
    private global::TTR.Protocol.ErrorCode errorCode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTR.Protocol.ErrorCode ErrorCode {
      get { return errorCode_; }
      set {
        errorCode_ = value;
      }
    }

    /// <summary>Field number for the "list_all_route_resp" field.</summary>
    public const int ListAllRouteRespFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTR.Protocol.ListAllRoutesResp ListAllRouteResp {
      get { return respCase_ == RespOneofCase.ListAllRouteResp ? (global::TTR.Protocol.ListAllRoutesResp) resp_ : null; }
      set {
        resp_ = value;
        respCase_ = value == null ? RespOneofCase.None : RespOneofCase.ListAllRouteResp;
      }
    }

    /// <summary>Field number for the "join_resp" field.</summary>
    public const int JoinRespFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTR.Protocol.JoinResp JoinResp {
      get { return respCase_ == RespOneofCase.JoinResp ? (global::TTR.Protocol.JoinResp) resp_ : null; }
      set {
        resp_ = value;
        respCase_ = value == null ? RespOneofCase.None : RespOneofCase.JoinResp;
      }
    }

    /// <summary>Field number for the "board_state_resp" field.</summary>
    public const int BoardStateRespFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTR.Protocol.BoardStateResp BoardStateResp {
      get { return respCase_ == RespOneofCase.BoardStateResp ? (global::TTR.Protocol.BoardStateResp) resp_ : null; }
      set {
        resp_ = value;
        respCase_ = value == null ? RespOneofCase.None : RespOneofCase.BoardStateResp;
      }
    }

    /// <summary>Field number for the "draw_passsenger_car_resp" field.</summary>
    public const int DrawPasssengerCarRespFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTR.Protocol.DrawPassengerCarsResp DrawPasssengerCarResp {
      get { return respCase_ == RespOneofCase.DrawPasssengerCarResp ? (global::TTR.Protocol.DrawPassengerCarsResp) resp_ : null; }
      set {
        resp_ = value;
        respCase_ = value == null ? RespOneofCase.None : RespOneofCase.DrawPasssengerCarResp;
      }
    }

    /// <summary>Field number for the "claim_route_resp" field.</summary>
    public const int ClaimRouteRespFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTR.Protocol.ClaimRouteResp ClaimRouteResp {
      get { return respCase_ == RespOneofCase.ClaimRouteResp ? (global::TTR.Protocol.ClaimRouteResp) resp_ : null; }
      set {
        resp_ = value;
        respCase_ = value == null ? RespOneofCase.None : RespOneofCase.ClaimRouteResp;
      }
    }

    /// <summary>Field number for the "draw_destination_tickets_resp" field.</summary>
    public const int DrawDestinationTicketsRespFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTR.Protocol.DrawDestinationTicketsResp DrawDestinationTicketsResp {
      get { return respCase_ == RespOneofCase.DrawDestinationTicketsResp ? (global::TTR.Protocol.DrawDestinationTicketsResp) resp_ : null; }
      set {
        resp_ = value;
        respCase_ = value == null ? RespOneofCase.None : RespOneofCase.DrawDestinationTicketsResp;
      }
    }

    /// <summary>Field number for the "claim_destination_tickets_resp" field.</summary>
    public const int ClaimDestinationTicketsRespFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTR.Protocol.ClaimDestinationTicketsResp ClaimDestinationTicketsResp {
      get { return respCase_ == RespOneofCase.ClaimDestinationTicketsResp ? (global::TTR.Protocol.ClaimDestinationTicketsResp) resp_ : null; }
      set {
        resp_ = value;
        respCase_ = value == null ? RespOneofCase.None : RespOneofCase.ClaimDestinationTicketsResp;
      }
    }

    /// <summary>Field number for the "player_score_resp" field.</summary>
    public const int PlayerScoreRespFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTR.Protocol.PlayerScoreResp PlayerScoreResp {
      get { return respCase_ == RespOneofCase.PlayerScoreResp ? (global::TTR.Protocol.PlayerScoreResp) resp_ : null; }
      set {
        resp_ = value;
        respCase_ = value == null ? RespOneofCase.None : RespOneofCase.PlayerScoreResp;
      }
    }

    private object resp_;
    /// <summary>Enum of possible cases for the "resp" oneof.</summary>
    public enum RespOneofCase {
      None = 0,
      ListAllRouteResp = 5,
      JoinResp = 6,
      BoardStateResp = 7,
      DrawPasssengerCarResp = 8,
      ClaimRouteResp = 9,
      DrawDestinationTicketsResp = 10,
      ClaimDestinationTicketsResp = 11,
      PlayerScoreResp = 12,
    }
    private RespOneofCase respCase_ = RespOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RespOneofCase RespCase {
      get { return respCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResp() {
      respCase_ = RespOneofCase.None;
      resp_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TurnResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TurnResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TurnType != other.TurnType) return false;
      if (Player != other.Player) return false;
      if (Success != other.Success) return false;
      if (ErrorCode != other.ErrorCode) return false;
      if (!object.Equals(ListAllRouteResp, other.ListAllRouteResp)) return false;
      if (!object.Equals(JoinResp, other.JoinResp)) return false;
      if (!object.Equals(BoardStateResp, other.BoardStateResp)) return false;
      if (!object.Equals(DrawPasssengerCarResp, other.DrawPasssengerCarResp)) return false;
      if (!object.Equals(ClaimRouteResp, other.ClaimRouteResp)) return false;
      if (!object.Equals(DrawDestinationTicketsResp, other.DrawDestinationTicketsResp)) return false;
      if (!object.Equals(ClaimDestinationTicketsResp, other.ClaimDestinationTicketsResp)) return false;
      if (!object.Equals(PlayerScoreResp, other.PlayerScoreResp)) return false;
      if (RespCase != other.RespCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TurnType != 0) hash ^= TurnType.GetHashCode();
      if (Player != 0) hash ^= Player.GetHashCode();
      if (Success != false) hash ^= Success.GetHashCode();
      if (ErrorCode != 0) hash ^= ErrorCode.GetHashCode();
      if (respCase_ == RespOneofCase.ListAllRouteResp) hash ^= ListAllRouteResp.GetHashCode();
      if (respCase_ == RespOneofCase.JoinResp) hash ^= JoinResp.GetHashCode();
      if (respCase_ == RespOneofCase.BoardStateResp) hash ^= BoardStateResp.GetHashCode();
      if (respCase_ == RespOneofCase.DrawPasssengerCarResp) hash ^= DrawPasssengerCarResp.GetHashCode();
      if (respCase_ == RespOneofCase.ClaimRouteResp) hash ^= ClaimRouteResp.GetHashCode();
      if (respCase_ == RespOneofCase.DrawDestinationTicketsResp) hash ^= DrawDestinationTicketsResp.GetHashCode();
      if (respCase_ == RespOneofCase.ClaimDestinationTicketsResp) hash ^= ClaimDestinationTicketsResp.GetHashCode();
      if (respCase_ == RespOneofCase.PlayerScoreResp) hash ^= PlayerScoreResp.GetHashCode();
      hash ^= (int) respCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TurnType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) TurnType);
      }
      if (Player != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Player);
      }
      if (Success != false) {
        output.WriteRawTag(24);
        output.WriteBool(Success);
      }
      if (ErrorCode != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) ErrorCode);
      }
      if (respCase_ == RespOneofCase.ListAllRouteResp) {
        output.WriteRawTag(42);
        output.WriteMessage(ListAllRouteResp);
      }
      if (respCase_ == RespOneofCase.JoinResp) {
        output.WriteRawTag(50);
        output.WriteMessage(JoinResp);
      }
      if (respCase_ == RespOneofCase.BoardStateResp) {
        output.WriteRawTag(58);
        output.WriteMessage(BoardStateResp);
      }
      if (respCase_ == RespOneofCase.DrawPasssengerCarResp) {
        output.WriteRawTag(66);
        output.WriteMessage(DrawPasssengerCarResp);
      }
      if (respCase_ == RespOneofCase.ClaimRouteResp) {
        output.WriteRawTag(74);
        output.WriteMessage(ClaimRouteResp);
      }
      if (respCase_ == RespOneofCase.DrawDestinationTicketsResp) {
        output.WriteRawTag(82);
        output.WriteMessage(DrawDestinationTicketsResp);
      }
      if (respCase_ == RespOneofCase.ClaimDestinationTicketsResp) {
        output.WriteRawTag(90);
        output.WriteMessage(ClaimDestinationTicketsResp);
      }
      if (respCase_ == RespOneofCase.PlayerScoreResp) {
        output.WriteRawTag(98);
        output.WriteMessage(PlayerScoreResp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TurnType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TurnType);
      }
      if (Player != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Player);
      }
      if (Success != false) {
        size += 1 + 1;
      }
      if (ErrorCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ErrorCode);
      }
      if (respCase_ == RespOneofCase.ListAllRouteResp) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ListAllRouteResp);
      }
      if (respCase_ == RespOneofCase.JoinResp) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(JoinResp);
      }
      if (respCase_ == RespOneofCase.BoardStateResp) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BoardStateResp);
      }
      if (respCase_ == RespOneofCase.DrawPasssengerCarResp) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DrawPasssengerCarResp);
      }
      if (respCase_ == RespOneofCase.ClaimRouteResp) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClaimRouteResp);
      }
      if (respCase_ == RespOneofCase.DrawDestinationTicketsResp) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DrawDestinationTicketsResp);
      }
      if (respCase_ == RespOneofCase.ClaimDestinationTicketsResp) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClaimDestinationTicketsResp);
      }
      if (respCase_ == RespOneofCase.PlayerScoreResp) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerScoreResp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TurnResp other) {
      if (other == null) {
        return;
      }
      if (other.TurnType != 0) {
        TurnType = other.TurnType;
      }
      if (other.Player != 0) {
        Player = other.Player;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.ErrorCode != 0) {
        ErrorCode = other.ErrorCode;
      }
      switch (other.RespCase) {
        case RespOneofCase.ListAllRouteResp:
          if (ListAllRouteResp == null) {
            ListAllRouteResp = new global::TTR.Protocol.ListAllRoutesResp();
          }
          ListAllRouteResp.MergeFrom(other.ListAllRouteResp);
          break;
        case RespOneofCase.JoinResp:
          if (JoinResp == null) {
            JoinResp = new global::TTR.Protocol.JoinResp();
          }
          JoinResp.MergeFrom(other.JoinResp);
          break;
        case RespOneofCase.BoardStateResp:
          if (BoardStateResp == null) {
            BoardStateResp = new global::TTR.Protocol.BoardStateResp();
          }
          BoardStateResp.MergeFrom(other.BoardStateResp);
          break;
        case RespOneofCase.DrawPasssengerCarResp:
          if (DrawPasssengerCarResp == null) {
            DrawPasssengerCarResp = new global::TTR.Protocol.DrawPassengerCarsResp();
          }
          DrawPasssengerCarResp.MergeFrom(other.DrawPasssengerCarResp);
          break;
        case RespOneofCase.ClaimRouteResp:
          if (ClaimRouteResp == null) {
            ClaimRouteResp = new global::TTR.Protocol.ClaimRouteResp();
          }
          ClaimRouteResp.MergeFrom(other.ClaimRouteResp);
          break;
        case RespOneofCase.DrawDestinationTicketsResp:
          if (DrawDestinationTicketsResp == null) {
            DrawDestinationTicketsResp = new global::TTR.Protocol.DrawDestinationTicketsResp();
          }
          DrawDestinationTicketsResp.MergeFrom(other.DrawDestinationTicketsResp);
          break;
        case RespOneofCase.ClaimDestinationTicketsResp:
          if (ClaimDestinationTicketsResp == null) {
            ClaimDestinationTicketsResp = new global::TTR.Protocol.ClaimDestinationTicketsResp();
          }
          ClaimDestinationTicketsResp.MergeFrom(other.ClaimDestinationTicketsResp);
          break;
        case RespOneofCase.PlayerScoreResp:
          if (PlayerScoreResp == null) {
            PlayerScoreResp = new global::TTR.Protocol.PlayerScoreResp();
          }
          PlayerScoreResp.MergeFrom(other.PlayerScoreResp);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TurnType = (global::TTR.Protocol.TurnType) input.ReadEnum();
            break;
          }
          case 16: {
            Player = (global::TTR.Protocol.PlayerColor) input.ReadEnum();
            break;
          }
          case 24: {
            Success = input.ReadBool();
            break;
          }
          case 32: {
            ErrorCode = (global::TTR.Protocol.ErrorCode) input.ReadEnum();
            break;
          }
          case 42: {
            global::TTR.Protocol.ListAllRoutesResp subBuilder = new global::TTR.Protocol.ListAllRoutesResp();
            if (respCase_ == RespOneofCase.ListAllRouteResp) {
              subBuilder.MergeFrom(ListAllRouteResp);
            }
            input.ReadMessage(subBuilder);
            ListAllRouteResp = subBuilder;
            break;
          }
          case 50: {
            global::TTR.Protocol.JoinResp subBuilder = new global::TTR.Protocol.JoinResp();
            if (respCase_ == RespOneofCase.JoinResp) {
              subBuilder.MergeFrom(JoinResp);
            }
            input.ReadMessage(subBuilder);
            JoinResp = subBuilder;
            break;
          }
          case 58: {
            global::TTR.Protocol.BoardStateResp subBuilder = new global::TTR.Protocol.BoardStateResp();
            if (respCase_ == RespOneofCase.BoardStateResp) {
              subBuilder.MergeFrom(BoardStateResp);
            }
            input.ReadMessage(subBuilder);
            BoardStateResp = subBuilder;
            break;
          }
          case 66: {
            global::TTR.Protocol.DrawPassengerCarsResp subBuilder = new global::TTR.Protocol.DrawPassengerCarsResp();
            if (respCase_ == RespOneofCase.DrawPasssengerCarResp) {
              subBuilder.MergeFrom(DrawPasssengerCarResp);
            }
            input.ReadMessage(subBuilder);
            DrawPasssengerCarResp = subBuilder;
            break;
          }
          case 74: {
            global::TTR.Protocol.ClaimRouteResp subBuilder = new global::TTR.Protocol.ClaimRouteResp();
            if (respCase_ == RespOneofCase.ClaimRouteResp) {
              subBuilder.MergeFrom(ClaimRouteResp);
            }
            input.ReadMessage(subBuilder);
            ClaimRouteResp = subBuilder;
            break;
          }
          case 82: {
            global::TTR.Protocol.DrawDestinationTicketsResp subBuilder = new global::TTR.Protocol.DrawDestinationTicketsResp();
            if (respCase_ == RespOneofCase.DrawDestinationTicketsResp) {
              subBuilder.MergeFrom(DrawDestinationTicketsResp);
            }
            input.ReadMessage(subBuilder);
            DrawDestinationTicketsResp = subBuilder;
            break;
          }
          case 90: {
            global::TTR.Protocol.ClaimDestinationTicketsResp subBuilder = new global::TTR.Protocol.ClaimDestinationTicketsResp();
            if (respCase_ == RespOneofCase.ClaimDestinationTicketsResp) {
              subBuilder.MergeFrom(ClaimDestinationTicketsResp);
            }
            input.ReadMessage(subBuilder);
            ClaimDestinationTicketsResp = subBuilder;
            break;
          }
          case 98: {
            global::TTR.Protocol.PlayerScoreResp subBuilder = new global::TTR.Protocol.PlayerScoreResp();
            if (respCase_ == RespOneofCase.PlayerScoreResp) {
              subBuilder.MergeFrom(PlayerScoreResp);
            }
            input.ReadMessage(subBuilder);
            PlayerScoreResp = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class TurnReq : pb::IMessage<TurnReq> {
    private static readonly pb::MessageParser<TurnReq> _parser = new pb::MessageParser<TurnReq>(() => new TurnReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TurnReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TTR.Protocol.TtrProtocolReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TurnReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TurnReq(TurnReq other) : this() {
      turnType_ = other.turnType_;
      player_ = other.player_;
      switch (other.ReqCase) {
        case ReqOneofCase.ListAllRouteReq:
          ListAllRouteReq = other.ListAllRouteReq.Clone();
          break;
        case ReqOneofCase.JoinReq:
          JoinReq = other.JoinReq.Clone();
          break;
        case ReqOneofCase.BoardStateReq:
          BoardStateReq = other.BoardStateReq.Clone();
          break;
        case ReqOneofCase.DrawPasssengerCarReq:
          DrawPasssengerCarReq = other.DrawPasssengerCarReq.Clone();
          break;
        case ReqOneofCase.ClaimRouteReq:
          ClaimRouteReq = other.ClaimRouteReq.Clone();
          break;
        case ReqOneofCase.DrawDestinationTicketsReq:
          DrawDestinationTicketsReq = other.DrawDestinationTicketsReq.Clone();
          break;
        case ReqOneofCase.ClaimDestinationTicketsReq:
          ClaimDestinationTicketsReq = other.ClaimDestinationTicketsReq.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TurnReq Clone() {
      return new TurnReq(this);
    }

    /// <summary>Field number for the "turn_type" field.</summary>
    public const int TurnTypeFieldNumber = 1;
    private global::TTR.Protocol.TurnType turnType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTR.Protocol.TurnType TurnType {
      get { return turnType_; }
      set {
        turnType_ = value;
      }
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 2;
    private global::TTR.Protocol.PlayerColor player_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTR.Protocol.PlayerColor Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    /// <summary>Field number for the "list_all_route_req" field.</summary>
    public const int ListAllRouteReqFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTR.Protocol.ListAllRoutesReq ListAllRouteReq {
      get { return reqCase_ == ReqOneofCase.ListAllRouteReq ? (global::TTR.Protocol.ListAllRoutesReq) req_ : null; }
      set {
        req_ = value;
        reqCase_ = value == null ? ReqOneofCase.None : ReqOneofCase.ListAllRouteReq;
      }
    }

    /// <summary>Field number for the "join_req" field.</summary>
    public const int JoinReqFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTR.Protocol.JoinReq JoinReq {
      get { return reqCase_ == ReqOneofCase.JoinReq ? (global::TTR.Protocol.JoinReq) req_ : null; }
      set {
        req_ = value;
        reqCase_ = value == null ? ReqOneofCase.None : ReqOneofCase.JoinReq;
      }
    }

    /// <summary>Field number for the "board_state_req" field.</summary>
    public const int BoardStateReqFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTR.Protocol.BoardStateReq BoardStateReq {
      get { return reqCase_ == ReqOneofCase.BoardStateReq ? (global::TTR.Protocol.BoardStateReq) req_ : null; }
      set {
        req_ = value;
        reqCase_ = value == null ? ReqOneofCase.None : ReqOneofCase.BoardStateReq;
      }
    }

    /// <summary>Field number for the "draw_passsenger_car_req" field.</summary>
    public const int DrawPasssengerCarReqFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTR.Protocol.DrawPassengerCarsReq DrawPasssengerCarReq {
      get { return reqCase_ == ReqOneofCase.DrawPasssengerCarReq ? (global::TTR.Protocol.DrawPassengerCarsReq) req_ : null; }
      set {
        req_ = value;
        reqCase_ = value == null ? ReqOneofCase.None : ReqOneofCase.DrawPasssengerCarReq;
      }
    }

    /// <summary>Field number for the "claim_route_req" field.</summary>
    public const int ClaimRouteReqFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTR.Protocol.ClaimRouteReq ClaimRouteReq {
      get { return reqCase_ == ReqOneofCase.ClaimRouteReq ? (global::TTR.Protocol.ClaimRouteReq) req_ : null; }
      set {
        req_ = value;
        reqCase_ = value == null ? ReqOneofCase.None : ReqOneofCase.ClaimRouteReq;
      }
    }

    /// <summary>Field number for the "draw_destination_tickets_req" field.</summary>
    public const int DrawDestinationTicketsReqFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTR.Protocol.DrawDestinationTicketsReq DrawDestinationTicketsReq {
      get { return reqCase_ == ReqOneofCase.DrawDestinationTicketsReq ? (global::TTR.Protocol.DrawDestinationTicketsReq) req_ : null; }
      set {
        req_ = value;
        reqCase_ = value == null ? ReqOneofCase.None : ReqOneofCase.DrawDestinationTicketsReq;
      }
    }

    /// <summary>Field number for the "claim_destination_tickets_req" field.</summary>
    public const int ClaimDestinationTicketsReqFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTR.Protocol.ClaimDestinationTicketsReq ClaimDestinationTicketsReq {
      get { return reqCase_ == ReqOneofCase.ClaimDestinationTicketsReq ? (global::TTR.Protocol.ClaimDestinationTicketsReq) req_ : null; }
      set {
        req_ = value;
        reqCase_ = value == null ? ReqOneofCase.None : ReqOneofCase.ClaimDestinationTicketsReq;
      }
    }

    private object req_;
    /// <summary>Enum of possible cases for the "req" oneof.</summary>
    public enum ReqOneofCase {
      None = 0,
      ListAllRouteReq = 3,
      JoinReq = 4,
      BoardStateReq = 5,
      DrawPasssengerCarReq = 6,
      ClaimRouteReq = 7,
      DrawDestinationTicketsReq = 8,
      ClaimDestinationTicketsReq = 9,
    }
    private ReqOneofCase reqCase_ = ReqOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqOneofCase ReqCase {
      get { return reqCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearReq() {
      reqCase_ = ReqOneofCase.None;
      req_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TurnReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TurnReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TurnType != other.TurnType) return false;
      if (Player != other.Player) return false;
      if (!object.Equals(ListAllRouteReq, other.ListAllRouteReq)) return false;
      if (!object.Equals(JoinReq, other.JoinReq)) return false;
      if (!object.Equals(BoardStateReq, other.BoardStateReq)) return false;
      if (!object.Equals(DrawPasssengerCarReq, other.DrawPasssengerCarReq)) return false;
      if (!object.Equals(ClaimRouteReq, other.ClaimRouteReq)) return false;
      if (!object.Equals(DrawDestinationTicketsReq, other.DrawDestinationTicketsReq)) return false;
      if (!object.Equals(ClaimDestinationTicketsReq, other.ClaimDestinationTicketsReq)) return false;
      if (ReqCase != other.ReqCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TurnType != 0) hash ^= TurnType.GetHashCode();
      if (Player != 0) hash ^= Player.GetHashCode();
      if (reqCase_ == ReqOneofCase.ListAllRouteReq) hash ^= ListAllRouteReq.GetHashCode();
      if (reqCase_ == ReqOneofCase.JoinReq) hash ^= JoinReq.GetHashCode();
      if (reqCase_ == ReqOneofCase.BoardStateReq) hash ^= BoardStateReq.GetHashCode();
      if (reqCase_ == ReqOneofCase.DrawPasssengerCarReq) hash ^= DrawPasssengerCarReq.GetHashCode();
      if (reqCase_ == ReqOneofCase.ClaimRouteReq) hash ^= ClaimRouteReq.GetHashCode();
      if (reqCase_ == ReqOneofCase.DrawDestinationTicketsReq) hash ^= DrawDestinationTicketsReq.GetHashCode();
      if (reqCase_ == ReqOneofCase.ClaimDestinationTicketsReq) hash ^= ClaimDestinationTicketsReq.GetHashCode();
      hash ^= (int) reqCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TurnType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) TurnType);
      }
      if (Player != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Player);
      }
      if (reqCase_ == ReqOneofCase.ListAllRouteReq) {
        output.WriteRawTag(26);
        output.WriteMessage(ListAllRouteReq);
      }
      if (reqCase_ == ReqOneofCase.JoinReq) {
        output.WriteRawTag(34);
        output.WriteMessage(JoinReq);
      }
      if (reqCase_ == ReqOneofCase.BoardStateReq) {
        output.WriteRawTag(42);
        output.WriteMessage(BoardStateReq);
      }
      if (reqCase_ == ReqOneofCase.DrawPasssengerCarReq) {
        output.WriteRawTag(50);
        output.WriteMessage(DrawPasssengerCarReq);
      }
      if (reqCase_ == ReqOneofCase.ClaimRouteReq) {
        output.WriteRawTag(58);
        output.WriteMessage(ClaimRouteReq);
      }
      if (reqCase_ == ReqOneofCase.DrawDestinationTicketsReq) {
        output.WriteRawTag(66);
        output.WriteMessage(DrawDestinationTicketsReq);
      }
      if (reqCase_ == ReqOneofCase.ClaimDestinationTicketsReq) {
        output.WriteRawTag(74);
        output.WriteMessage(ClaimDestinationTicketsReq);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TurnType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TurnType);
      }
      if (Player != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Player);
      }
      if (reqCase_ == ReqOneofCase.ListAllRouteReq) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ListAllRouteReq);
      }
      if (reqCase_ == ReqOneofCase.JoinReq) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(JoinReq);
      }
      if (reqCase_ == ReqOneofCase.BoardStateReq) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BoardStateReq);
      }
      if (reqCase_ == ReqOneofCase.DrawPasssengerCarReq) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DrawPasssengerCarReq);
      }
      if (reqCase_ == ReqOneofCase.ClaimRouteReq) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClaimRouteReq);
      }
      if (reqCase_ == ReqOneofCase.DrawDestinationTicketsReq) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DrawDestinationTicketsReq);
      }
      if (reqCase_ == ReqOneofCase.ClaimDestinationTicketsReq) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClaimDestinationTicketsReq);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TurnReq other) {
      if (other == null) {
        return;
      }
      if (other.TurnType != 0) {
        TurnType = other.TurnType;
      }
      if (other.Player != 0) {
        Player = other.Player;
      }
      switch (other.ReqCase) {
        case ReqOneofCase.ListAllRouteReq:
          if (ListAllRouteReq == null) {
            ListAllRouteReq = new global::TTR.Protocol.ListAllRoutesReq();
          }
          ListAllRouteReq.MergeFrom(other.ListAllRouteReq);
          break;
        case ReqOneofCase.JoinReq:
          if (JoinReq == null) {
            JoinReq = new global::TTR.Protocol.JoinReq();
          }
          JoinReq.MergeFrom(other.JoinReq);
          break;
        case ReqOneofCase.BoardStateReq:
          if (BoardStateReq == null) {
            BoardStateReq = new global::TTR.Protocol.BoardStateReq();
          }
          BoardStateReq.MergeFrom(other.BoardStateReq);
          break;
        case ReqOneofCase.DrawPasssengerCarReq:
          if (DrawPasssengerCarReq == null) {
            DrawPasssengerCarReq = new global::TTR.Protocol.DrawPassengerCarsReq();
          }
          DrawPasssengerCarReq.MergeFrom(other.DrawPasssengerCarReq);
          break;
        case ReqOneofCase.ClaimRouteReq:
          if (ClaimRouteReq == null) {
            ClaimRouteReq = new global::TTR.Protocol.ClaimRouteReq();
          }
          ClaimRouteReq.MergeFrom(other.ClaimRouteReq);
          break;
        case ReqOneofCase.DrawDestinationTicketsReq:
          if (DrawDestinationTicketsReq == null) {
            DrawDestinationTicketsReq = new global::TTR.Protocol.DrawDestinationTicketsReq();
          }
          DrawDestinationTicketsReq.MergeFrom(other.DrawDestinationTicketsReq);
          break;
        case ReqOneofCase.ClaimDestinationTicketsReq:
          if (ClaimDestinationTicketsReq == null) {
            ClaimDestinationTicketsReq = new global::TTR.Protocol.ClaimDestinationTicketsReq();
          }
          ClaimDestinationTicketsReq.MergeFrom(other.ClaimDestinationTicketsReq);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TurnType = (global::TTR.Protocol.TurnType) input.ReadEnum();
            break;
          }
          case 16: {
            Player = (global::TTR.Protocol.PlayerColor) input.ReadEnum();
            break;
          }
          case 26: {
            global::TTR.Protocol.ListAllRoutesReq subBuilder = new global::TTR.Protocol.ListAllRoutesReq();
            if (reqCase_ == ReqOneofCase.ListAllRouteReq) {
              subBuilder.MergeFrom(ListAllRouteReq);
            }
            input.ReadMessage(subBuilder);
            ListAllRouteReq = subBuilder;
            break;
          }
          case 34: {
            global::TTR.Protocol.JoinReq subBuilder = new global::TTR.Protocol.JoinReq();
            if (reqCase_ == ReqOneofCase.JoinReq) {
              subBuilder.MergeFrom(JoinReq);
            }
            input.ReadMessage(subBuilder);
            JoinReq = subBuilder;
            break;
          }
          case 42: {
            global::TTR.Protocol.BoardStateReq subBuilder = new global::TTR.Protocol.BoardStateReq();
            if (reqCase_ == ReqOneofCase.BoardStateReq) {
              subBuilder.MergeFrom(BoardStateReq);
            }
            input.ReadMessage(subBuilder);
            BoardStateReq = subBuilder;
            break;
          }
          case 50: {
            global::TTR.Protocol.DrawPassengerCarsReq subBuilder = new global::TTR.Protocol.DrawPassengerCarsReq();
            if (reqCase_ == ReqOneofCase.DrawPasssengerCarReq) {
              subBuilder.MergeFrom(DrawPasssengerCarReq);
            }
            input.ReadMessage(subBuilder);
            DrawPasssengerCarReq = subBuilder;
            break;
          }
          case 58: {
            global::TTR.Protocol.ClaimRouteReq subBuilder = new global::TTR.Protocol.ClaimRouteReq();
            if (reqCase_ == ReqOneofCase.ClaimRouteReq) {
              subBuilder.MergeFrom(ClaimRouteReq);
            }
            input.ReadMessage(subBuilder);
            ClaimRouteReq = subBuilder;
            break;
          }
          case 66: {
            global::TTR.Protocol.DrawDestinationTicketsReq subBuilder = new global::TTR.Protocol.DrawDestinationTicketsReq();
            if (reqCase_ == ReqOneofCase.DrawDestinationTicketsReq) {
              subBuilder.MergeFrom(DrawDestinationTicketsReq);
            }
            input.ReadMessage(subBuilder);
            DrawDestinationTicketsReq = subBuilder;
            break;
          }
          case 74: {
            global::TTR.Protocol.ClaimDestinationTicketsReq subBuilder = new global::TTR.Protocol.ClaimDestinationTicketsReq();
            if (reqCase_ == ReqOneofCase.ClaimDestinationTicketsReq) {
              subBuilder.MergeFrom(ClaimDestinationTicketsReq);
            }
            input.ReadMessage(subBuilder);
            ClaimDestinationTicketsReq = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class DestinationTicket : pb::IMessage<DestinationTicket> {
    private static readonly pb::MessageParser<DestinationTicket> _parser = new pb::MessageParser<DestinationTicket>(() => new DestinationTicket());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DestinationTicket> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TTR.Protocol.TtrProtocolReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DestinationTicket() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DestinationTicket(DestinationTicket other) : this() {
      city1_ = other.city1_;
      city2_ = other.city2_;
      points_ = other.points_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DestinationTicket Clone() {
      return new DestinationTicket(this);
    }

    /// <summary>Field number for the "city1" field.</summary>
    public const int City1FieldNumber = 1;
    private global::TTR.Protocol.Destination city1_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTR.Protocol.Destination City1 {
      get { return city1_; }
      set {
        city1_ = value;
      }
    }

    /// <summary>Field number for the "city2" field.</summary>
    public const int City2FieldNumber = 2;
    private global::TTR.Protocol.Destination city2_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTR.Protocol.Destination City2 {
      get { return city2_; }
      set {
        city2_ = value;
      }
    }

    /// <summary>Field number for the "points" field.</summary>
    public const int PointsFieldNumber = 3;
    private int points_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Points {
      get { return points_; }
      set {
        points_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DestinationTicket);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DestinationTicket other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (City1 != other.City1) return false;
      if (City2 != other.City2) return false;
      if (Points != other.Points) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (City1 != 0) hash ^= City1.GetHashCode();
      if (City2 != 0) hash ^= City2.GetHashCode();
      if (Points != 0) hash ^= Points.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (City1 != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) City1);
      }
      if (City2 != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) City2);
      }
      if (Points != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Points);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (City1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) City1);
      }
      if (City2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) City2);
      }
      if (Points != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Points);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DestinationTicket other) {
      if (other == null) {
        return;
      }
      if (other.City1 != 0) {
        City1 = other.City1;
      }
      if (other.City2 != 0) {
        City2 = other.City2;
      }
      if (other.Points != 0) {
        Points = other.Points;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            City1 = (global::TTR.Protocol.Destination) input.ReadEnum();
            break;
          }
          case 16: {
            City2 = (global::TTR.Protocol.Destination) input.ReadEnum();
            break;
          }
          case 24: {
            Points = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Route : pb::IMessage<Route> {
    private static readonly pb::MessageParser<Route> _parser = new pb::MessageParser<Route>(() => new Route());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Route> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TTR.Protocol.TtrProtocolReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Route() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Route(Route other) : this() {
      d1_ = other.d1_;
      d2_ = other.d2_;
      cost_ = other.cost_;
      color_ = other.color_;
      claimedBy_ = other.claimedBy_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Route Clone() {
      return new Route(this);
    }

    /// <summary>Field number for the "d1" field.</summary>
    public const int D1FieldNumber = 1;
    private global::TTR.Protocol.Destination d1_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTR.Protocol.Destination D1 {
      get { return d1_; }
      set {
        d1_ = value;
      }
    }

    /// <summary>Field number for the "d2" field.</summary>
    public const int D2FieldNumber = 2;
    private global::TTR.Protocol.Destination d2_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTR.Protocol.Destination D2 {
      get { return d2_; }
      set {
        d2_ = value;
      }
    }

    /// <summary>Field number for the "cost" field.</summary>
    public const int CostFieldNumber = 3;
    private int cost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cost {
      get { return cost_; }
      set {
        cost_ = value;
      }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 4;
    private global::TTR.Protocol.PassengerCarColor color_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTR.Protocol.PassengerCarColor Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    /// <summary>Field number for the "claimed_by" field.</summary>
    public const int ClaimedByFieldNumber = 5;
    private global::TTR.Protocol.PlayerColor claimedBy_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTR.Protocol.PlayerColor ClaimedBy {
      get { return claimedBy_; }
      set {
        claimedBy_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Route);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Route other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (D1 != other.D1) return false;
      if (D2 != other.D2) return false;
      if (Cost != other.Cost) return false;
      if (Color != other.Color) return false;
      if (ClaimedBy != other.ClaimedBy) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (D1 != 0) hash ^= D1.GetHashCode();
      if (D2 != 0) hash ^= D2.GetHashCode();
      if (Cost != 0) hash ^= Cost.GetHashCode();
      if (Color != 0) hash ^= Color.GetHashCode();
      if (ClaimedBy != 0) hash ^= ClaimedBy.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (D1 != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) D1);
      }
      if (D2 != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) D2);
      }
      if (Cost != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Cost);
      }
      if (Color != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Color);
      }
      if (ClaimedBy != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) ClaimedBy);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (D1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) D1);
      }
      if (D2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) D2);
      }
      if (Cost != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cost);
      }
      if (Color != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Color);
      }
      if (ClaimedBy != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ClaimedBy);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Route other) {
      if (other == null) {
        return;
      }
      if (other.D1 != 0) {
        D1 = other.D1;
      }
      if (other.D2 != 0) {
        D2 = other.D2;
      }
      if (other.Cost != 0) {
        Cost = other.Cost;
      }
      if (other.Color != 0) {
        Color = other.Color;
      }
      if (other.ClaimedBy != 0) {
        ClaimedBy = other.ClaimedBy;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            D1 = (global::TTR.Protocol.Destination) input.ReadEnum();
            break;
          }
          case 16: {
            D2 = (global::TTR.Protocol.Destination) input.ReadEnum();
            break;
          }
          case 24: {
            Cost = input.ReadInt32();
            break;
          }
          case 32: {
            Color = (global::TTR.Protocol.PassengerCarColor) input.ReadEnum();
            break;
          }
          case 40: {
            ClaimedBy = (global::TTR.Protocol.PlayerColor) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// ---------- Turn Responses ----------
  /// </summary>
  public sealed partial class ListAllRoutesResp : pb::IMessage<ListAllRoutesResp> {
    private static readonly pb::MessageParser<ListAllRoutesResp> _parser = new pb::MessageParser<ListAllRoutesResp>(() => new ListAllRoutesResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListAllRoutesResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TTR.Protocol.TtrProtocolReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListAllRoutesResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListAllRoutesResp(ListAllRoutesResp other) : this() {
      routes_ = other.routes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListAllRoutesResp Clone() {
      return new ListAllRoutesResp(this);
    }

    /// <summary>Field number for the "routes" field.</summary>
    public const int RoutesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::TTR.Protocol.Route> _repeated_routes_codec
        = pb::FieldCodec.ForMessage(10, global::TTR.Protocol.Route.Parser);
    private readonly pbc::RepeatedField<global::TTR.Protocol.Route> routes_ = new pbc::RepeatedField<global::TTR.Protocol.Route>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TTR.Protocol.Route> Routes {
      get { return routes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListAllRoutesResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListAllRoutesResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!routes_.Equals(other.routes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= routes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      routes_.WriteTo(output, _repeated_routes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += routes_.CalculateSize(_repeated_routes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListAllRoutesResp other) {
      if (other == null) {
        return;
      }
      routes_.Add(other.routes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            routes_.AddEntriesFrom(input, _repeated_routes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class JoinResp : pb::IMessage<JoinResp> {
    private static readonly pb::MessageParser<JoinResp> _parser = new pb::MessageParser<JoinResp>(() => new JoinResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JoinResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TTR.Protocol.TtrProtocolReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinResp(JoinResp other) : this() {
      clientType_ = other.clientType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinResp Clone() {
      return new JoinResp(this);
    }

    /// <summary>Field number for the "client_type" field.</summary>
    public const int ClientTypeFieldNumber = 1;
    private global::TTR.Protocol.ClientType clientType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTR.Protocol.ClientType ClientType {
      get { return clientType_; }
      set {
        clientType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JoinResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JoinResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClientType != other.ClientType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClientType != 0) hash ^= ClientType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClientType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ClientType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClientType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ClientType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JoinResp other) {
      if (other == null) {
        return;
      }
      if (other.ClientType != 0) {
        ClientType = other.ClientType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ClientType = (global::TTR.Protocol.ClientType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BoardStateResp : pb::IMessage<BoardStateResp> {
    private static readonly pb::MessageParser<BoardStateResp> _parser = new pb::MessageParser<BoardStateResp>(() => new BoardStateResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BoardStateResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TTR.Protocol.TtrProtocolReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoardStateResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoardStateResp(BoardStateResp other) : this() {
      faceUpPassengerCardDeck_ = other.faceUpPassengerCardDeck_.Clone();
      topdownPassengerCarDeckCount_ = other.topdownPassengerCarDeckCount_;
      destinationTicketsCount_ = other.destinationTicketsCount_;
      drawnPassengerCars_ = other.drawnPassengerCars_.Clone();
      leftPassengerCars_ = other.leftPassengerCars_;
      drawnDetinationTickets_ = other.drawnDetinationTickets_.Clone();
      toBeClaimedDestinationTickets_ = other.toBeClaimedDestinationTickets_.Clone();
      ownRoutes_ = other.ownRoutes_.Clone();
      activePlayers_ = other.activePlayers_;
      finalTurn_ = other.finalTurn_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoardStateResp Clone() {
      return new BoardStateResp(this);
    }

    /// <summary>Field number for the "face_up_passenger_card_deck" field.</summary>
    public const int FaceUpPassengerCardDeckFieldNumber = 1;
    private static readonly pb::FieldCodec<global::TTR.Protocol.PassengerCarColor> _repeated_faceUpPassengerCardDeck_codec
        = pb::FieldCodec.ForEnum(10, x => (int) x, x => (global::TTR.Protocol.PassengerCarColor) x);
    private readonly pbc::RepeatedField<global::TTR.Protocol.PassengerCarColor> faceUpPassengerCardDeck_ = new pbc::RepeatedField<global::TTR.Protocol.PassengerCarColor>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TTR.Protocol.PassengerCarColor> FaceUpPassengerCardDeck {
      get { return faceUpPassengerCardDeck_; }
    }

    /// <summary>Field number for the "topdown_passenger_car_deck_count" field.</summary>
    public const int TopdownPassengerCarDeckCountFieldNumber = 2;
    private int topdownPassengerCarDeckCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TopdownPassengerCarDeckCount {
      get { return topdownPassengerCarDeckCount_; }
      set {
        topdownPassengerCarDeckCount_ = value;
      }
    }

    /// <summary>Field number for the "destination_tickets_count" field.</summary>
    public const int DestinationTicketsCountFieldNumber = 3;
    private int destinationTicketsCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DestinationTicketsCount {
      get { return destinationTicketsCount_; }
      set {
        destinationTicketsCount_ = value;
      }
    }

    /// <summary>Field number for the "drawn_passenger_cars" field.</summary>
    public const int DrawnPassengerCarsFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_drawnPassengerCars_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> drawnPassengerCars_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> DrawnPassengerCars {
      get { return drawnPassengerCars_; }
    }

    /// <summary>Field number for the "left_passenger_cars" field.</summary>
    public const int LeftPassengerCarsFieldNumber = 5;
    private int leftPassengerCars_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LeftPassengerCars {
      get { return leftPassengerCars_; }
      set {
        leftPassengerCars_ = value;
      }
    }

    /// <summary>Field number for the "drawn_detination_tickets" field.</summary>
    public const int DrawnDetinationTicketsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::TTR.Protocol.DestinationTicket> _repeated_drawnDetinationTickets_codec
        = pb::FieldCodec.ForMessage(50, global::TTR.Protocol.DestinationTicket.Parser);
    private readonly pbc::RepeatedField<global::TTR.Protocol.DestinationTicket> drawnDetinationTickets_ = new pbc::RepeatedField<global::TTR.Protocol.DestinationTicket>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TTR.Protocol.DestinationTicket> DrawnDetinationTickets {
      get { return drawnDetinationTickets_; }
    }

    /// <summary>Field number for the "to_be_claimed_destination_tickets" field.</summary>
    public const int ToBeClaimedDestinationTicketsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::TTR.Protocol.DestinationTicket> _repeated_toBeClaimedDestinationTickets_codec
        = pb::FieldCodec.ForMessage(58, global::TTR.Protocol.DestinationTicket.Parser);
    private readonly pbc::RepeatedField<global::TTR.Protocol.DestinationTicket> toBeClaimedDestinationTickets_ = new pbc::RepeatedField<global::TTR.Protocol.DestinationTicket>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TTR.Protocol.DestinationTicket> ToBeClaimedDestinationTickets {
      get { return toBeClaimedDestinationTickets_; }
    }

    /// <summary>Field number for the "own_routes" field.</summary>
    public const int OwnRoutesFieldNumber = 8;
    private static readonly pb::FieldCodec<global::TTR.Protocol.Route> _repeated_ownRoutes_codec
        = pb::FieldCodec.ForMessage(66, global::TTR.Protocol.Route.Parser);
    private readonly pbc::RepeatedField<global::TTR.Protocol.Route> ownRoutes_ = new pbc::RepeatedField<global::TTR.Protocol.Route>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TTR.Protocol.Route> OwnRoutes {
      get { return ownRoutes_; }
    }

    /// <summary>Field number for the "active_players" field.</summary>
    public const int ActivePlayersFieldNumber = 9;
    private int activePlayers_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivePlayers {
      get { return activePlayers_; }
      set {
        activePlayers_ = value;
      }
    }

    /// <summary>Field number for the "finalTurn" field.</summary>
    public const int FinalTurnFieldNumber = 10;
    private bool finalTurn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FinalTurn {
      get { return finalTurn_; }
      set {
        finalTurn_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BoardStateResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BoardStateResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!faceUpPassengerCardDeck_.Equals(other.faceUpPassengerCardDeck_)) return false;
      if (TopdownPassengerCarDeckCount != other.TopdownPassengerCarDeckCount) return false;
      if (DestinationTicketsCount != other.DestinationTicketsCount) return false;
      if(!drawnPassengerCars_.Equals(other.drawnPassengerCars_)) return false;
      if (LeftPassengerCars != other.LeftPassengerCars) return false;
      if(!drawnDetinationTickets_.Equals(other.drawnDetinationTickets_)) return false;
      if(!toBeClaimedDestinationTickets_.Equals(other.toBeClaimedDestinationTickets_)) return false;
      if(!ownRoutes_.Equals(other.ownRoutes_)) return false;
      if (ActivePlayers != other.ActivePlayers) return false;
      if (FinalTurn != other.FinalTurn) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= faceUpPassengerCardDeck_.GetHashCode();
      if (TopdownPassengerCarDeckCount != 0) hash ^= TopdownPassengerCarDeckCount.GetHashCode();
      if (DestinationTicketsCount != 0) hash ^= DestinationTicketsCount.GetHashCode();
      hash ^= drawnPassengerCars_.GetHashCode();
      if (LeftPassengerCars != 0) hash ^= LeftPassengerCars.GetHashCode();
      hash ^= drawnDetinationTickets_.GetHashCode();
      hash ^= toBeClaimedDestinationTickets_.GetHashCode();
      hash ^= ownRoutes_.GetHashCode();
      if (ActivePlayers != 0) hash ^= ActivePlayers.GetHashCode();
      if (FinalTurn != false) hash ^= FinalTurn.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      faceUpPassengerCardDeck_.WriteTo(output, _repeated_faceUpPassengerCardDeck_codec);
      if (TopdownPassengerCarDeckCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TopdownPassengerCarDeckCount);
      }
      if (DestinationTicketsCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(DestinationTicketsCount);
      }
      drawnPassengerCars_.WriteTo(output, _repeated_drawnPassengerCars_codec);
      if (LeftPassengerCars != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(LeftPassengerCars);
      }
      drawnDetinationTickets_.WriteTo(output, _repeated_drawnDetinationTickets_codec);
      toBeClaimedDestinationTickets_.WriteTo(output, _repeated_toBeClaimedDestinationTickets_codec);
      ownRoutes_.WriteTo(output, _repeated_ownRoutes_codec);
      if (ActivePlayers != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(ActivePlayers);
      }
      if (FinalTurn != false) {
        output.WriteRawTag(80);
        output.WriteBool(FinalTurn);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += faceUpPassengerCardDeck_.CalculateSize(_repeated_faceUpPassengerCardDeck_codec);
      if (TopdownPassengerCarDeckCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TopdownPassengerCarDeckCount);
      }
      if (DestinationTicketsCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DestinationTicketsCount);
      }
      size += drawnPassengerCars_.CalculateSize(_repeated_drawnPassengerCars_codec);
      if (LeftPassengerCars != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeftPassengerCars);
      }
      size += drawnDetinationTickets_.CalculateSize(_repeated_drawnDetinationTickets_codec);
      size += toBeClaimedDestinationTickets_.CalculateSize(_repeated_toBeClaimedDestinationTickets_codec);
      size += ownRoutes_.CalculateSize(_repeated_ownRoutes_codec);
      if (ActivePlayers != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivePlayers);
      }
      if (FinalTurn != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BoardStateResp other) {
      if (other == null) {
        return;
      }
      faceUpPassengerCardDeck_.Add(other.faceUpPassengerCardDeck_);
      if (other.TopdownPassengerCarDeckCount != 0) {
        TopdownPassengerCarDeckCount = other.TopdownPassengerCarDeckCount;
      }
      if (other.DestinationTicketsCount != 0) {
        DestinationTicketsCount = other.DestinationTicketsCount;
      }
      drawnPassengerCars_.Add(other.drawnPassengerCars_);
      if (other.LeftPassengerCars != 0) {
        LeftPassengerCars = other.LeftPassengerCars;
      }
      drawnDetinationTickets_.Add(other.drawnDetinationTickets_);
      toBeClaimedDestinationTickets_.Add(other.toBeClaimedDestinationTickets_);
      ownRoutes_.Add(other.ownRoutes_);
      if (other.ActivePlayers != 0) {
        ActivePlayers = other.ActivePlayers;
      }
      if (other.FinalTurn != false) {
        FinalTurn = other.FinalTurn;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            faceUpPassengerCardDeck_.AddEntriesFrom(input, _repeated_faceUpPassengerCardDeck_codec);
            break;
          }
          case 16: {
            TopdownPassengerCarDeckCount = input.ReadInt32();
            break;
          }
          case 24: {
            DestinationTicketsCount = input.ReadInt32();
            break;
          }
          case 34:
          case 32: {
            drawnPassengerCars_.AddEntriesFrom(input, _repeated_drawnPassengerCars_codec);
            break;
          }
          case 40: {
            LeftPassengerCars = input.ReadInt32();
            break;
          }
          case 50: {
            drawnDetinationTickets_.AddEntriesFrom(input, _repeated_drawnDetinationTickets_codec);
            break;
          }
          case 58: {
            toBeClaimedDestinationTickets_.AddEntriesFrom(input, _repeated_toBeClaimedDestinationTickets_codec);
            break;
          }
          case 66: {
            ownRoutes_.AddEntriesFrom(input, _repeated_ownRoutes_codec);
            break;
          }
          case 72: {
            ActivePlayers = input.ReadInt32();
            break;
          }
          case 80: {
            FinalTurn = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DrawPassengerCarsResp : pb::IMessage<DrawPassengerCarsResp> {
    private static readonly pb::MessageParser<DrawPassengerCarsResp> _parser = new pb::MessageParser<DrawPassengerCarsResp>(() => new DrawPassengerCarsResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DrawPassengerCarsResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TTR.Protocol.TtrProtocolReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawPassengerCarsResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawPassengerCarsResp(DrawPassengerCarsResp other) : this() {
      drawnColor_ = other.drawnColor_;
      faceUpPassengerCarDeck_ = other.faceUpPassengerCarDeck_.Clone();
      hiddenDeck_ = other.hiddenDeck_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawPassengerCarsResp Clone() {
      return new DrawPassengerCarsResp(this);
    }

    /// <summary>Field number for the "drawn_color" field.</summary>
    public const int DrawnColorFieldNumber = 1;
    private global::TTR.Protocol.PassengerCarColor drawnColor_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTR.Protocol.PassengerCarColor DrawnColor {
      get { return drawnColor_; }
      set {
        drawnColor_ = value;
      }
    }

    /// <summary>Field number for the "face_up_passenger_car_deck" field.</summary>
    public const int FaceUpPassengerCarDeckFieldNumber = 2;
    private static readonly pb::FieldCodec<global::TTR.Protocol.PassengerCarColor> _repeated_faceUpPassengerCarDeck_codec
        = pb::FieldCodec.ForEnum(18, x => (int) x, x => (global::TTR.Protocol.PassengerCarColor) x);
    private readonly pbc::RepeatedField<global::TTR.Protocol.PassengerCarColor> faceUpPassengerCarDeck_ = new pbc::RepeatedField<global::TTR.Protocol.PassengerCarColor>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TTR.Protocol.PassengerCarColor> FaceUpPassengerCarDeck {
      get { return faceUpPassengerCarDeck_; }
    }

    /// <summary>Field number for the "hiddenDeck" field.</summary>
    public const int HiddenDeckFieldNumber = 3;
    private bool hiddenDeck_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HiddenDeck {
      get { return hiddenDeck_; }
      set {
        hiddenDeck_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DrawPassengerCarsResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DrawPassengerCarsResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DrawnColor != other.DrawnColor) return false;
      if(!faceUpPassengerCarDeck_.Equals(other.faceUpPassengerCarDeck_)) return false;
      if (HiddenDeck != other.HiddenDeck) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DrawnColor != 0) hash ^= DrawnColor.GetHashCode();
      hash ^= faceUpPassengerCarDeck_.GetHashCode();
      if (HiddenDeck != false) hash ^= HiddenDeck.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DrawnColor != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) DrawnColor);
      }
      faceUpPassengerCarDeck_.WriteTo(output, _repeated_faceUpPassengerCarDeck_codec);
      if (HiddenDeck != false) {
        output.WriteRawTag(24);
        output.WriteBool(HiddenDeck);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DrawnColor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DrawnColor);
      }
      size += faceUpPassengerCarDeck_.CalculateSize(_repeated_faceUpPassengerCarDeck_codec);
      if (HiddenDeck != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DrawPassengerCarsResp other) {
      if (other == null) {
        return;
      }
      if (other.DrawnColor != 0) {
        DrawnColor = other.DrawnColor;
      }
      faceUpPassengerCarDeck_.Add(other.faceUpPassengerCarDeck_);
      if (other.HiddenDeck != false) {
        HiddenDeck = other.HiddenDeck;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DrawnColor = (global::TTR.Protocol.PassengerCarColor) input.ReadEnum();
            break;
          }
          case 18:
          case 16: {
            faceUpPassengerCarDeck_.AddEntriesFrom(input, _repeated_faceUpPassengerCarDeck_codec);
            break;
          }
          case 24: {
            HiddenDeck = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ClaimRouteResp : pb::IMessage<ClaimRouteResp> {
    private static readonly pb::MessageParser<ClaimRouteResp> _parser = new pb::MessageParser<ClaimRouteResp>(() => new ClaimRouteResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClaimRouteResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TTR.Protocol.TtrProtocolReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClaimRouteResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClaimRouteResp(ClaimRouteResp other) : this() {
      d1_ = other.d1_;
      d2_ = other.d2_;
      routeColor_ = other.routeColor_;
      passengerCarColor_ = other.passengerCarColor_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClaimRouteResp Clone() {
      return new ClaimRouteResp(this);
    }

    /// <summary>Field number for the "d1" field.</summary>
    public const int D1FieldNumber = 1;
    private global::TTR.Protocol.Destination d1_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTR.Protocol.Destination D1 {
      get { return d1_; }
      set {
        d1_ = value;
      }
    }

    /// <summary>Field number for the "d2" field.</summary>
    public const int D2FieldNumber = 2;
    private global::TTR.Protocol.Destination d2_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTR.Protocol.Destination D2 {
      get { return d2_; }
      set {
        d2_ = value;
      }
    }

    /// <summary>Field number for the "route_color" field.</summary>
    public const int RouteColorFieldNumber = 3;
    private global::TTR.Protocol.PassengerCarColor routeColor_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTR.Protocol.PassengerCarColor RouteColor {
      get { return routeColor_; }
      set {
        routeColor_ = value;
      }
    }

    /// <summary>Field number for the "passenger_car_color" field.</summary>
    public const int PassengerCarColorFieldNumber = 4;
    private static readonly pb::FieldCodec<global::TTR.Protocol.PassengerCarColor> _repeated_passengerCarColor_codec
        = pb::FieldCodec.ForEnum(34, x => (int) x, x => (global::TTR.Protocol.PassengerCarColor) x);
    private readonly pbc::RepeatedField<global::TTR.Protocol.PassengerCarColor> passengerCarColor_ = new pbc::RepeatedField<global::TTR.Protocol.PassengerCarColor>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TTR.Protocol.PassengerCarColor> PassengerCarColor {
      get { return passengerCarColor_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClaimRouteResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClaimRouteResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (D1 != other.D1) return false;
      if (D2 != other.D2) return false;
      if (RouteColor != other.RouteColor) return false;
      if(!passengerCarColor_.Equals(other.passengerCarColor_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (D1 != 0) hash ^= D1.GetHashCode();
      if (D2 != 0) hash ^= D2.GetHashCode();
      if (RouteColor != 0) hash ^= RouteColor.GetHashCode();
      hash ^= passengerCarColor_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (D1 != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) D1);
      }
      if (D2 != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) D2);
      }
      if (RouteColor != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) RouteColor);
      }
      passengerCarColor_.WriteTo(output, _repeated_passengerCarColor_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (D1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) D1);
      }
      if (D2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) D2);
      }
      if (RouteColor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RouteColor);
      }
      size += passengerCarColor_.CalculateSize(_repeated_passengerCarColor_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClaimRouteResp other) {
      if (other == null) {
        return;
      }
      if (other.D1 != 0) {
        D1 = other.D1;
      }
      if (other.D2 != 0) {
        D2 = other.D2;
      }
      if (other.RouteColor != 0) {
        RouteColor = other.RouteColor;
      }
      passengerCarColor_.Add(other.passengerCarColor_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            D1 = (global::TTR.Protocol.Destination) input.ReadEnum();
            break;
          }
          case 16: {
            D2 = (global::TTR.Protocol.Destination) input.ReadEnum();
            break;
          }
          case 24: {
            RouteColor = (global::TTR.Protocol.PassengerCarColor) input.ReadEnum();
            break;
          }
          case 34:
          case 32: {
            passengerCarColor_.AddEntriesFrom(input, _repeated_passengerCarColor_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DrawDestinationTicketsResp : pb::IMessage<DrawDestinationTicketsResp> {
    private static readonly pb::MessageParser<DrawDestinationTicketsResp> _parser = new pb::MessageParser<DrawDestinationTicketsResp>(() => new DrawDestinationTicketsResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DrawDestinationTicketsResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TTR.Protocol.TtrProtocolReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawDestinationTicketsResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawDestinationTicketsResp(DrawDestinationTicketsResp other) : this() {
      drawnCards_ = other.drawnCards_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawDestinationTicketsResp Clone() {
      return new DrawDestinationTicketsResp(this);
    }

    /// <summary>Field number for the "drawn_cards" field.</summary>
    public const int DrawnCardsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::TTR.Protocol.DestinationTicket> _repeated_drawnCards_codec
        = pb::FieldCodec.ForMessage(10, global::TTR.Protocol.DestinationTicket.Parser);
    private readonly pbc::RepeatedField<global::TTR.Protocol.DestinationTicket> drawnCards_ = new pbc::RepeatedField<global::TTR.Protocol.DestinationTicket>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TTR.Protocol.DestinationTicket> DrawnCards {
      get { return drawnCards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DrawDestinationTicketsResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DrawDestinationTicketsResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!drawnCards_.Equals(other.drawnCards_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= drawnCards_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      drawnCards_.WriteTo(output, _repeated_drawnCards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += drawnCards_.CalculateSize(_repeated_drawnCards_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DrawDestinationTicketsResp other) {
      if (other == null) {
        return;
      }
      drawnCards_.Add(other.drawnCards_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            drawnCards_.AddEntriesFrom(input, _repeated_drawnCards_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ClaimDestinationTicketsResp : pb::IMessage<ClaimDestinationTicketsResp> {
    private static readonly pb::MessageParser<ClaimDestinationTicketsResp> _parser = new pb::MessageParser<ClaimDestinationTicketsResp>(() => new ClaimDestinationTicketsResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClaimDestinationTicketsResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TTR.Protocol.TtrProtocolReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClaimDestinationTicketsResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClaimDestinationTicketsResp(ClaimDestinationTicketsResp other) : this() {
      drawnCards_ = other.drawnCards_.Clone();
      drawnCardsCount_ = other.drawnCardsCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClaimDestinationTicketsResp Clone() {
      return new ClaimDestinationTicketsResp(this);
    }

    /// <summary>Field number for the "drawn_cards" field.</summary>
    public const int DrawnCardsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::TTR.Protocol.DestinationTicket> _repeated_drawnCards_codec
        = pb::FieldCodec.ForMessage(10, global::TTR.Protocol.DestinationTicket.Parser);
    private readonly pbc::RepeatedField<global::TTR.Protocol.DestinationTicket> drawnCards_ = new pbc::RepeatedField<global::TTR.Protocol.DestinationTicket>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TTR.Protocol.DestinationTicket> DrawnCards {
      get { return drawnCards_; }
    }

    /// <summary>Field number for the "drawn_cards_count" field.</summary>
    public const int DrawnCardsCountFieldNumber = 2;
    private int drawnCardsCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DrawnCardsCount {
      get { return drawnCardsCount_; }
      set {
        drawnCardsCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClaimDestinationTicketsResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClaimDestinationTicketsResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!drawnCards_.Equals(other.drawnCards_)) return false;
      if (DrawnCardsCount != other.DrawnCardsCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= drawnCards_.GetHashCode();
      if (DrawnCardsCount != 0) hash ^= DrawnCardsCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      drawnCards_.WriteTo(output, _repeated_drawnCards_codec);
      if (DrawnCardsCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DrawnCardsCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += drawnCards_.CalculateSize(_repeated_drawnCards_codec);
      if (DrawnCardsCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DrawnCardsCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClaimDestinationTicketsResp other) {
      if (other == null) {
        return;
      }
      drawnCards_.Add(other.drawnCards_);
      if (other.DrawnCardsCount != 0) {
        DrawnCardsCount = other.DrawnCardsCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            drawnCards_.AddEntriesFrom(input, _repeated_drawnCards_codec);
            break;
          }
          case 16: {
            DrawnCardsCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerScoreResp : pb::IMessage<PlayerScoreResp> {
    private static readonly pb::MessageParser<PlayerScoreResp> _parser = new pb::MessageParser<PlayerScoreResp>(() => new PlayerScoreResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerScoreResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TTR.Protocol.TtrProtocolReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerScoreResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerScoreResp(PlayerScoreResp other) : this() {
      name_ = other.name_;
      totalScore_ = other.totalScore_;
      scorePassengerCars_ = other.scorePassengerCars_;
      longRouteLength_ = other.longRouteLength_;
      winner_ = other.winner_;
      longestRoute_ = other.longestRoute_;
      claimedTickets_ = other.claimedTickets_.Clone();
      notClaimedTickets_ = other.notClaimedTickets_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerScoreResp Clone() {
      return new PlayerScoreResp(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "total_score" field.</summary>
    public const int TotalScoreFieldNumber = 2;
    private int totalScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalScore {
      get { return totalScore_; }
      set {
        totalScore_ = value;
      }
    }

    /// <summary>Field number for the "score_passenger_cars" field.</summary>
    public const int ScorePassengerCarsFieldNumber = 3;
    private int scorePassengerCars_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ScorePassengerCars {
      get { return scorePassengerCars_; }
      set {
        scorePassengerCars_ = value;
      }
    }

    /// <summary>Field number for the "long_route_length" field.</summary>
    public const int LongRouteLengthFieldNumber = 4;
    private int longRouteLength_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LongRouteLength {
      get { return longRouteLength_; }
      set {
        longRouteLength_ = value;
      }
    }

    /// <summary>Field number for the "winner" field.</summary>
    public const int WinnerFieldNumber = 5;
    private bool winner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Winner {
      get { return winner_; }
      set {
        winner_ = value;
      }
    }

    /// <summary>Field number for the "longest_route" field.</summary>
    public const int LongestRouteFieldNumber = 6;
    private bool longestRoute_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LongestRoute {
      get { return longestRoute_; }
      set {
        longestRoute_ = value;
      }
    }

    /// <summary>Field number for the "claimed_tickets" field.</summary>
    public const int ClaimedTicketsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::TTR.Protocol.DestinationTicket> _repeated_claimedTickets_codec
        = pb::FieldCodec.ForMessage(58, global::TTR.Protocol.DestinationTicket.Parser);
    private readonly pbc::RepeatedField<global::TTR.Protocol.DestinationTicket> claimedTickets_ = new pbc::RepeatedField<global::TTR.Protocol.DestinationTicket>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TTR.Protocol.DestinationTicket> ClaimedTickets {
      get { return claimedTickets_; }
    }

    /// <summary>Field number for the "not_claimed_tickets" field.</summary>
    public const int NotClaimedTicketsFieldNumber = 8;
    private static readonly pb::FieldCodec<global::TTR.Protocol.DestinationTicket> _repeated_notClaimedTickets_codec
        = pb::FieldCodec.ForMessage(66, global::TTR.Protocol.DestinationTicket.Parser);
    private readonly pbc::RepeatedField<global::TTR.Protocol.DestinationTicket> notClaimedTickets_ = new pbc::RepeatedField<global::TTR.Protocol.DestinationTicket>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TTR.Protocol.DestinationTicket> NotClaimedTickets {
      get { return notClaimedTickets_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerScoreResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerScoreResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (TotalScore != other.TotalScore) return false;
      if (ScorePassengerCars != other.ScorePassengerCars) return false;
      if (LongRouteLength != other.LongRouteLength) return false;
      if (Winner != other.Winner) return false;
      if (LongestRoute != other.LongestRoute) return false;
      if(!claimedTickets_.Equals(other.claimedTickets_)) return false;
      if(!notClaimedTickets_.Equals(other.notClaimedTickets_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (TotalScore != 0) hash ^= TotalScore.GetHashCode();
      if (ScorePassengerCars != 0) hash ^= ScorePassengerCars.GetHashCode();
      if (LongRouteLength != 0) hash ^= LongRouteLength.GetHashCode();
      if (Winner != false) hash ^= Winner.GetHashCode();
      if (LongestRoute != false) hash ^= LongestRoute.GetHashCode();
      hash ^= claimedTickets_.GetHashCode();
      hash ^= notClaimedTickets_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (TotalScore != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TotalScore);
      }
      if (ScorePassengerCars != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ScorePassengerCars);
      }
      if (LongRouteLength != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(LongRouteLength);
      }
      if (Winner != false) {
        output.WriteRawTag(40);
        output.WriteBool(Winner);
      }
      if (LongestRoute != false) {
        output.WriteRawTag(48);
        output.WriteBool(LongestRoute);
      }
      claimedTickets_.WriteTo(output, _repeated_claimedTickets_codec);
      notClaimedTickets_.WriteTo(output, _repeated_notClaimedTickets_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (TotalScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalScore);
      }
      if (ScorePassengerCars != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ScorePassengerCars);
      }
      if (LongRouteLength != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LongRouteLength);
      }
      if (Winner != false) {
        size += 1 + 1;
      }
      if (LongestRoute != false) {
        size += 1 + 1;
      }
      size += claimedTickets_.CalculateSize(_repeated_claimedTickets_codec);
      size += notClaimedTickets_.CalculateSize(_repeated_notClaimedTickets_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerScoreResp other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.TotalScore != 0) {
        TotalScore = other.TotalScore;
      }
      if (other.ScorePassengerCars != 0) {
        ScorePassengerCars = other.ScorePassengerCars;
      }
      if (other.LongRouteLength != 0) {
        LongRouteLength = other.LongRouteLength;
      }
      if (other.Winner != false) {
        Winner = other.Winner;
      }
      if (other.LongestRoute != false) {
        LongestRoute = other.LongestRoute;
      }
      claimedTickets_.Add(other.claimedTickets_);
      notClaimedTickets_.Add(other.notClaimedTickets_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            TotalScore = input.ReadInt32();
            break;
          }
          case 24: {
            ScorePassengerCars = input.ReadInt32();
            break;
          }
          case 32: {
            LongRouteLength = input.ReadInt32();
            break;
          }
          case 40: {
            Winner = input.ReadBool();
            break;
          }
          case 48: {
            LongestRoute = input.ReadBool();
            break;
          }
          case 58: {
            claimedTickets_.AddEntriesFrom(input, _repeated_claimedTickets_codec);
            break;
          }
          case 66: {
            notClaimedTickets_.AddEntriesFrom(input, _repeated_notClaimedTickets_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// ---------- Turn Requests ----------
  /// </summary>
  public sealed partial class BoardStateReq : pb::IMessage<BoardStateReq> {
    private static readonly pb::MessageParser<BoardStateReq> _parser = new pb::MessageParser<BoardStateReq>(() => new BoardStateReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BoardStateReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TTR.Protocol.TtrProtocolReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoardStateReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoardStateReq(BoardStateReq other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoardStateReq Clone() {
      return new BoardStateReq(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BoardStateReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BoardStateReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BoardStateReq other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class ListAllRoutesReq : pb::IMessage<ListAllRoutesReq> {
    private static readonly pb::MessageParser<ListAllRoutesReq> _parser = new pb::MessageParser<ListAllRoutesReq>(() => new ListAllRoutesReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListAllRoutesReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TTR.Protocol.TtrProtocolReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListAllRoutesReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListAllRoutesReq(ListAllRoutesReq other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListAllRoutesReq Clone() {
      return new ListAllRoutesReq(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListAllRoutesReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListAllRoutesReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListAllRoutesReq other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class DrawDestinationTicketsReq : pb::IMessage<DrawDestinationTicketsReq> {
    private static readonly pb::MessageParser<DrawDestinationTicketsReq> _parser = new pb::MessageParser<DrawDestinationTicketsReq>(() => new DrawDestinationTicketsReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DrawDestinationTicketsReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TTR.Protocol.TtrProtocolReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawDestinationTicketsReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawDestinationTicketsReq(DrawDestinationTicketsReq other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawDestinationTicketsReq Clone() {
      return new DrawDestinationTicketsReq(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DrawDestinationTicketsReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DrawDestinationTicketsReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DrawDestinationTicketsReq other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class JoinReq : pb::IMessage<JoinReq> {
    private static readonly pb::MessageParser<JoinReq> _parser = new pb::MessageParser<JoinReq>(() => new JoinReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JoinReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TTR.Protocol.TtrProtocolReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinReq(JoinReq other) : this() {
      playerName_ = other.playerName_;
      clientType_ = other.clientType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinReq Clone() {
      return new JoinReq(this);
    }

    /// <summary>Field number for the "player_name" field.</summary>
    public const int PlayerNameFieldNumber = 1;
    private string playerName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerName {
      get { return playerName_; }
      set {
        playerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "client_type" field.</summary>
    public const int ClientTypeFieldNumber = 2;
    private global::TTR.Protocol.ClientType clientType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTR.Protocol.ClientType ClientType {
      get { return clientType_; }
      set {
        clientType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JoinReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JoinReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerName != other.PlayerName) return false;
      if (ClientType != other.ClientType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerName.Length != 0) hash ^= PlayerName.GetHashCode();
      if (ClientType != 0) hash ^= ClientType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlayerName);
      }
      if (ClientType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ClientType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerName);
      }
      if (ClientType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ClientType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JoinReq other) {
      if (other == null) {
        return;
      }
      if (other.PlayerName.Length != 0) {
        PlayerName = other.PlayerName;
      }
      if (other.ClientType != 0) {
        ClientType = other.ClientType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PlayerName = input.ReadString();
            break;
          }
          case 16: {
            ClientType = (global::TTR.Protocol.ClientType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DrawPassengerCarsReq : pb::IMessage<DrawPassengerCarsReq> {
    private static readonly pb::MessageParser<DrawPassengerCarsReq> _parser = new pb::MessageParser<DrawPassengerCarsReq>(() => new DrawPassengerCarsReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DrawPassengerCarsReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TTR.Protocol.TtrProtocolReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawPassengerCarsReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawPassengerCarsReq(DrawPassengerCarsReq other) : this() {
      hiddenDeck_ = other.hiddenDeck_;
      passengerCarColor_ = other.passengerCarColor_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawPassengerCarsReq Clone() {
      return new DrawPassengerCarsReq(this);
    }

    /// <summary>Field number for the "hidden_deck" field.</summary>
    public const int HiddenDeckFieldNumber = 1;
    private bool hiddenDeck_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HiddenDeck {
      get { return hiddenDeck_; }
      set {
        hiddenDeck_ = value;
      }
    }

    /// <summary>Field number for the "passenger_car_color" field.</summary>
    public const int PassengerCarColorFieldNumber = 2;
    private global::TTR.Protocol.PassengerCarColor passengerCarColor_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTR.Protocol.PassengerCarColor PassengerCarColor {
      get { return passengerCarColor_; }
      set {
        passengerCarColor_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DrawPassengerCarsReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DrawPassengerCarsReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HiddenDeck != other.HiddenDeck) return false;
      if (PassengerCarColor != other.PassengerCarColor) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HiddenDeck != false) hash ^= HiddenDeck.GetHashCode();
      if (PassengerCarColor != 0) hash ^= PassengerCarColor.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HiddenDeck != false) {
        output.WriteRawTag(8);
        output.WriteBool(HiddenDeck);
      }
      if (PassengerCarColor != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) PassengerCarColor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HiddenDeck != false) {
        size += 1 + 1;
      }
      if (PassengerCarColor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PassengerCarColor);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DrawPassengerCarsReq other) {
      if (other == null) {
        return;
      }
      if (other.HiddenDeck != false) {
        HiddenDeck = other.HiddenDeck;
      }
      if (other.PassengerCarColor != 0) {
        PassengerCarColor = other.PassengerCarColor;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            HiddenDeck = input.ReadBool();
            break;
          }
          case 16: {
            PassengerCarColor = (global::TTR.Protocol.PassengerCarColor) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ClaimDestinationTicketsReq : pb::IMessage<ClaimDestinationTicketsReq> {
    private static readonly pb::MessageParser<ClaimDestinationTicketsReq> _parser = new pb::MessageParser<ClaimDestinationTicketsReq>(() => new ClaimDestinationTicketsReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClaimDestinationTicketsReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TTR.Protocol.TtrProtocolReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClaimDestinationTicketsReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClaimDestinationTicketsReq(ClaimDestinationTicketsReq other) : this() {
      keep_ = other.keep_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClaimDestinationTicketsReq Clone() {
      return new ClaimDestinationTicketsReq(this);
    }

    /// <summary>Field number for the "keep" field.</summary>
    public const int KeepFieldNumber = 1;
    private static readonly pb::FieldCodec<bool> _repeated_keep_codec
        = pb::FieldCodec.ForBool(10);
    private readonly pbc::RepeatedField<bool> keep_ = new pbc::RepeatedField<bool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<bool> Keep {
      get { return keep_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClaimDestinationTicketsReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClaimDestinationTicketsReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!keep_.Equals(other.keep_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= keep_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      keep_.WriteTo(output, _repeated_keep_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += keep_.CalculateSize(_repeated_keep_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClaimDestinationTicketsReq other) {
      if (other == null) {
        return;
      }
      keep_.Add(other.keep_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            keep_.AddEntriesFrom(input, _repeated_keep_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ClaimRouteReq : pb::IMessage<ClaimRouteReq> {
    private static readonly pb::MessageParser<ClaimRouteReq> _parser = new pb::MessageParser<ClaimRouteReq>(() => new ClaimRouteReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClaimRouteReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TTR.Protocol.TtrProtocolReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClaimRouteReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClaimRouteReq(ClaimRouteReq other) : this() {
      d1_ = other.d1_;
      d2_ = other.d2_;
      color_ = other.color_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClaimRouteReq Clone() {
      return new ClaimRouteReq(this);
    }

    /// <summary>Field number for the "d1" field.</summary>
    public const int D1FieldNumber = 1;
    private global::TTR.Protocol.Destination d1_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTR.Protocol.Destination D1 {
      get { return d1_; }
      set {
        d1_ = value;
      }
    }

    /// <summary>Field number for the "d2" field.</summary>
    public const int D2FieldNumber = 2;
    private global::TTR.Protocol.Destination d2_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTR.Protocol.Destination D2 {
      get { return d2_; }
      set {
        d2_ = value;
      }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 3;
    private global::TTR.Protocol.PassengerCarColor color_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTR.Protocol.PassengerCarColor Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClaimRouteReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClaimRouteReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (D1 != other.D1) return false;
      if (D2 != other.D2) return false;
      if (Color != other.Color) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (D1 != 0) hash ^= D1.GetHashCode();
      if (D2 != 0) hash ^= D2.GetHashCode();
      if (Color != 0) hash ^= Color.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (D1 != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) D1);
      }
      if (D2 != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) D2);
      }
      if (Color != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Color);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (D1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) D1);
      }
      if (D2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) D2);
      }
      if (Color != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Color);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClaimRouteReq other) {
      if (other == null) {
        return;
      }
      if (other.D1 != 0) {
        D1 = other.D1;
      }
      if (other.D2 != 0) {
        D2 = other.D2;
      }
      if (other.Color != 0) {
        Color = other.Color;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            D1 = (global::TTR.Protocol.Destination) input.ReadEnum();
            break;
          }
          case 16: {
            D2 = (global::TTR.Protocol.Destination) input.ReadEnum();
            break;
          }
          case 24: {
            Color = (global::TTR.Protocol.PassengerCarColor) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
